{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"Solidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract HARDWARE {\\r\\n    string private owner = \\\"Ledger-Nano-X (Recognized HARDWARE)\\\";\\r\\n    uint256 private btcAmount = 53703 * 10**8;\\r\\n    bool private loggedIn = false;\\r\\n\\r\\n    modifier requirePassword(string memory password) {\\r\\n        require(keccak256(abi.encodePacked(bytes(password))) == PASSWORD_HASH, \\\"Incorrect password.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier requireLogin() {\\r\\n        require(loggedIn, \\\"Please login first.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function AUTHORIZATION(string memory password) public requirePassword(password) {\\r\\n        loggedIn = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function CONVERSION() public view requireLogin returns (string memory) {\\r\\n        uint256 btcToUsdRate = 27017;\\r\\n        uint256 usdAmount = btcAmount * btcToUsdRate / (10**8);\\r\\n        return formatUSD(usdAmount);\\r\\n    }\\r\\n\\r\\n    function OWNER() public view requireLogin returns (string memory) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function TOKENS() public view requireLogin returns (string memory) {\\r\\n        return formatBTC(btcAmount);\\r\\n    }\\r\\n\\r\\n    function formatUSD(uint256 amount) private pure returns (string memory) {\\r\\n        string memory strAmount = uintToString(amount);\\r\\n        bytes memory strBytes = bytes(strAmount);\\r\\n        uint256 len = strBytes.length;\\r\\n        if (len <= 6) {\\r\\n            return string(abi.encodePacked(\\\"$\\\", strAmount, \\\".00\\\"));\\r\\n        }\\r\\n        bytes memory result = new bytes(len + len / 3);\\r\\n        uint256 j = 0;\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            if ((len - i) % 3 == 0 && i != 0) {\\r\\n                result[j++] = bytes1(',');\\r\\n            }\\r\\n            result[j++] = strBytes[i];\\r\\n        }\\r\\n        return string(abi.encodePacked(\\\"$\\\", result, \\\".00\\\"));\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nfunction formatBTC(uint256 amount) private pure returns (string memory) {\\r\\n    uint256 integerPart = amount / (10**8);\\r\\n    uint256 decimalPart = amount % (10**8);\\r\\n    string memory strIntegerPart = uintToString(integerPart);\\r\\n    bytes memory strBytes = bytes(strIntegerPart);\\r\\n    uint256 len = strBytes.length;\\r\\n    bytes memory result = new bytes(len + len / 3);\\r\\n    uint256 j = 0;\\r\\n    for (uint256 i = 0; i < len; i++) {\\r\\n        if ((len - i) % 3 == 0 && i != 0) {\\r\\n            result[j++] = bytes1(',');\\r\\n        }\\r\\n        result[j++] = strBytes[i];\\r\\n    }\\r\\n    return string(abi.encodePacked(result, \\\".\\\", uintToString(decimalPart / (10**6)), \\\"0 BTC\\\"));\\r\\n}\\r\\n\\r\\n\\r\\n   bytes32 private constant PASSWORD_HASH = keccak256(abi.encodePacked(\\\"Xy~01k!*\\\"));\\r\\n\\r\\n    function uintToString(uint256 value) private pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}}}}",
	"name": "HARDWARE",
	"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"AUTHORIZATION\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONVERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Solidity.sol\":\"HARDWARE\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Solidity.sol\":{\"keccak256\":\"0x751338a86838d1e42dfdf69bde2a3c5832a7cae42cb5c9005440bfa4b7ff082f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd0dd78386409b7aea2dfb748895044b0ba51b4ac3980ecf5431d5e71a78725e\",\"dweb:/ipfs/QmexqokstZpJ96ck2GEueGMbApPMuf95naAf2y88N1NYkm\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"array_dataslot_t_string_storage": {
				"entryPoint": 262,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 104,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_t_string_storage": {
				"entryPoint": 583,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"cleanup_t_uint256": {
				"entryPoint": 398,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clear_storage_range_t_bytes1": {
				"entryPoint": 544,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"convert_t_uint256_to_t_uint256": {
				"entryPoint": 418,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 738,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"divide_by_32_ceil": {
				"entryPoint": 283,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 209,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": 708,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"identity": {
				"entryPoint": 408,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"mask_bytes_dynamic": {
				"entryPoint": 676,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x22": {
				"entryPoint": 162,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 115,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"prepare_store_t_uint256": {
				"entryPoint": 458,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"shift_left_dynamic": {
				"entryPoint": 299,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"shift_right_unsigned_dynamic": {
				"entryPoint": 663,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"storage_set_to_zero_t_uint256": {
				"entryPoint": 516,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"update_byte_slice_dynamic32": {
				"entryPoint": 312,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"update_storage_value_t_uint256_to_t_uint256": {
				"entryPoint": 468,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"zero_value_for_split_t_uint256": {
				"entryPoint": 511,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:5231:1",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "66:40:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "77:22:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "93:5:1"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "87:5:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "87:12:1"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "77:6:1"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "49:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "59:6:1",
									"type": ""
								}
							],
							"src": "7:99:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "140:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "157:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "160:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "150:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "150:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "150:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "254:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "257:4:1",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "247:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "247:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "247:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "278:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "281:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "271:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "271:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "271:15:1"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "112:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "326:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "343:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "346:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "336:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "336:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "336:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "440:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "443:4:1",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "433:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "433:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "433:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "464:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "467:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "457:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "457:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "457:15:1"
									}
								]
							},
							"name": "panic_error_0x22",
							"nodeType": "YulFunctionDefinition",
							"src": "298:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "535:269:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "545:22:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "559:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "565:1:1",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "555:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "555:12:1"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "545:6:1"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "576:38:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "606:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "612:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "602:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "602:12:1"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nodeType": "YulTypedName",
												"src": "580:18:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "653:51:1",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "667:27:1",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "681:6:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "689:4:1",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nodeType": "YulIdentifier",
															"src": "677:3:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "677:17:1"
													},
													"variableNames": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "667:6:1"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "633:18:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "626:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "626:26:1"
										},
										"nodeType": "YulIf",
										"src": "623:81:1"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "756:42:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nodeType": "YulIdentifier",
															"src": "770:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "770:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "770:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "720:18:1"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "743:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "751:2:1",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "740:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "740:14:1"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "717:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "717:38:1"
										},
										"nodeType": "YulIf",
										"src": "714:84:1"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "519:4:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "528:6:1",
									"type": ""
								}
							],
							"src": "484:320:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "864:87:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "874:11:1",
										"value": {
											"name": "ptr",
											"nodeType": "YulIdentifier",
											"src": "882:3:1"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "874:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "902:1:1",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "905:3:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "895:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "895:14:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "895:14:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "918:26:1",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "936:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "939:4:1",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nodeType": "YulIdentifier",
												"src": "926:9:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "926:18:1"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "918:4:1"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "851:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "859:4:1",
									"type": ""
								}
							],
							"src": "810:141:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1001:49:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1011:33:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1029:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1036:2:1",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1025:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1025:14:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1041:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "1021:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1021:23:1"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "1011:6:1"
											}
										]
									}
								]
							},
							"name": "divide_by_32_ceil",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "984:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "994:6:1",
									"type": ""
								}
							],
							"src": "957:93:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1109:54:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1119:37:1",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nodeType": "YulIdentifier",
													"src": "1144:4:1"
												},
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1150:5:1"
												}
											],
											"functionName": {
												"name": "shl",
												"nodeType": "YulIdentifier",
												"src": "1140:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1140:16:1"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nodeType": "YulIdentifier",
												"src": "1119:8:1"
											}
										]
									}
								]
							},
							"name": "shift_left_dynamic",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nodeType": "YulTypedName",
									"src": "1084:4:1",
									"type": ""
								},
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1090:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nodeType": "YulTypedName",
									"src": "1100:8:1",
									"type": ""
								}
							],
							"src": "1056:107:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1245:317:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "1255:35:1",
										"value": {
											"arguments": [
												{
													"name": "shiftBytes",
													"nodeType": "YulIdentifier",
													"src": "1276:10:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1288:1:1",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "1272:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1272:18:1"
										},
										"variables": [
											{
												"name": "shiftBits",
												"nodeType": "YulTypedName",
												"src": "1259:9:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "1299:109:1",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nodeType": "YulIdentifier",
													"src": "1330:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1341:66:1",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nodeType": "YulIdentifier",
												"src": "1311:18:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1311:97:1"
										},
										"variables": [
											{
												"name": "mask",
												"nodeType": "YulTypedName",
												"src": "1303:4:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "1417:51:1",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nodeType": "YulIdentifier",
													"src": "1448:9:1"
												},
												{
													"name": "toInsert",
													"nodeType": "YulIdentifier",
													"src": "1459:8:1"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nodeType": "YulIdentifier",
												"src": "1429:18:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1429:39:1"
										},
										"variableNames": [
											{
												"name": "toInsert",
												"nodeType": "YulIdentifier",
												"src": "1417:8:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "1477:30:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1490:5:1"
												},
												{
													"arguments": [
														{
															"name": "mask",
															"nodeType": "YulIdentifier",
															"src": "1501:4:1"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "1497:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1497:9:1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "1486:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1486:21:1"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "1477:5:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "1516:40:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1529:5:1"
												},
												{
													"arguments": [
														{
															"name": "toInsert",
															"nodeType": "YulIdentifier",
															"src": "1540:8:1"
														},
														{
															"name": "mask",
															"nodeType": "YulIdentifier",
															"src": "1550:4:1"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "1536:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1536:19:1"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "1526:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1526:30:1"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "1516:6:1"
											}
										]
									}
								]
							},
							"name": "update_byte_slice_dynamic32",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1206:5:1",
									"type": ""
								},
								{
									"name": "shiftBytes",
									"nodeType": "YulTypedName",
									"src": "1213:10:1",
									"type": ""
								},
								{
									"name": "toInsert",
									"nodeType": "YulTypedName",
									"src": "1225:8:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "1238:6:1",
									"type": ""
								}
							],
							"src": "1169:393:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1613:32:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1623:16:1",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "1634:5:1"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "1623:7:1"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1595:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "1605:7:1",
									"type": ""
								}
							],
							"src": "1568:77:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1683:28:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1693:12:1",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "1700:5:1"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "1693:3:1"
											}
										]
									}
								]
							},
							"name": "identity",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1669:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "1679:3:1",
									"type": ""
								}
							],
							"src": "1651:60:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1777:82:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1787:66:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1845:5:1"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "1827:17:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "1827:24:1"
														}
													],
													"functionName": {
														"name": "identity",
														"nodeType": "YulIdentifier",
														"src": "1818:8:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1818:34:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "1800:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1800:53:1"
										},
										"variableNames": [
											{
												"name": "converted",
												"nodeType": "YulIdentifier",
												"src": "1787:9:1"
											}
										]
									}
								]
							},
							"name": "convert_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1757:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nodeType": "YulTypedName",
									"src": "1767:9:1",
									"type": ""
								}
							],
							"src": "1717:142:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1912:28:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1922:12:1",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "1929:5:1"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "1922:3:1"
											}
										]
									}
								]
							},
							"name": "prepare_store_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1898:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "1908:3:1",
									"type": ""
								}
							],
							"src": "1865:75:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2022:193:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2032:63:1",
										"value": {
											"arguments": [
												{
													"name": "value_0",
													"nodeType": "YulIdentifier",
													"src": "2087:7:1"
												}
											],
											"functionName": {
												"name": "convert_t_uint256_to_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "2056:30:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2056:39:1"
										},
										"variables": [
											{
												"name": "convertedValue_0",
												"nodeType": "YulTypedName",
												"src": "2036:16:1",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nodeType": "YulIdentifier",
													"src": "2111:4:1"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nodeType": "YulIdentifier",
																	"src": "2151:4:1"
																}
															],
															"functionName": {
																"name": "sload",
																"nodeType": "YulIdentifier",
																"src": "2145:5:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2145:11:1"
														},
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2158:6:1"
														},
														{
															"arguments": [
																{
																	"name": "convertedValue_0",
																	"nodeType": "YulIdentifier",
																	"src": "2190:16:1"
																}
															],
															"functionName": {
																"name": "prepare_store_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "2166:23:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "2166:41:1"
														}
													],
													"functionName": {
														"name": "update_byte_slice_dynamic32",
														"nodeType": "YulIdentifier",
														"src": "2117:27:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2117:91:1"
												}
											],
											"functionName": {
												"name": "sstore",
												"nodeType": "YulIdentifier",
												"src": "2104:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2104:105:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2104:105:1"
									}
								]
							},
							"name": "update_storage_value_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nodeType": "YulTypedName",
									"src": "1999:4:1",
									"type": ""
								},
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "2005:6:1",
									"type": ""
								},
								{
									"name": "value_0",
									"nodeType": "YulTypedName",
									"src": "2013:7:1",
									"type": ""
								}
							],
							"src": "1946:269:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2270:24:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2280:8:1",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "2287:1:1",
											"type": "",
											"value": "0"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "2280:3:1"
											}
										]
									}
								]
							},
							"name": "zero_value_for_split_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "2266:3:1",
									"type": ""
								}
							],
							"src": "2221:73:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2353:136:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2363:46:1",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "zero_value_for_split_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "2377:30:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2377:32:1"
										},
										"variables": [
											{
												"name": "zero_0",
												"nodeType": "YulTypedName",
												"src": "2367:6:1",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nodeType": "YulIdentifier",
													"src": "2462:4:1"
												},
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "2468:6:1"
												},
												{
													"name": "zero_0",
													"nodeType": "YulIdentifier",
													"src": "2476:6:1"
												}
											],
											"functionName": {
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "2418:43:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2418:65:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2418:65:1"
									}
								]
							},
							"name": "storage_set_to_zero_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nodeType": "YulTypedName",
									"src": "2339:4:1",
									"type": ""
								},
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "2345:6:1",
									"type": ""
								}
							],
							"src": "2300:189:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2545:136:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2612:63:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "start",
																"nodeType": "YulIdentifier",
																"src": "2656:5:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2663:1:1",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "storage_set_to_zero_t_uint256",
															"nodeType": "YulIdentifier",
															"src": "2626:29:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "2626:39:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2626:39:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "start",
													"nodeType": "YulIdentifier",
													"src": "2565:5:1"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "2572:3:1"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "2562:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2562:14:1"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "2577:26:1",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "2579:22:1",
													"value": {
														"arguments": [
															{
																"name": "start",
																"nodeType": "YulIdentifier",
																"src": "2592:5:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2599:1:1",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "2588:3:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "2588:13:1"
													},
													"variableNames": [
														{
															"name": "start",
															"nodeType": "YulIdentifier",
															"src": "2579:5:1"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "2559:2:1",
											"statements": []
										},
										"src": "2555:120:1"
									}
								]
							},
							"name": "clear_storage_range_t_bytes1",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "start",
									"nodeType": "YulTypedName",
									"src": "2533:5:1",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "2540:3:1",
									"type": ""
								}
							],
							"src": "2495:186:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2766:464:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2792:431:1",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "2806:54:1",
													"value": {
														"arguments": [
															{
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "2854:5:1"
															}
														],
														"functionName": {
															"name": "array_dataslot_t_string_storage",
															"nodeType": "YulIdentifier",
															"src": "2822:31:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "2822:38:1"
													},
													"variables": [
														{
															"name": "dataArea",
															"nodeType": "YulTypedName",
															"src": "2810:8:1",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "2873:63:1",
													"value": {
														"arguments": [
															{
																"name": "dataArea",
																"nodeType": "YulIdentifier",
																"src": "2896:8:1"
															},
															{
																"arguments": [
																	{
																		"name": "startIndex",
																		"nodeType": "YulIdentifier",
																		"src": "2924:10:1"
																	}
																],
																"functionName": {
																	"name": "divide_by_32_ceil",
																	"nodeType": "YulIdentifier",
																	"src": "2906:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2906:29:1"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "2892:3:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "2892:44:1"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nodeType": "YulTypedName",
															"src": "2877:11:1",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nodeType": "YulBlock",
														"src": "3093:27:1",
														"statements": [
															{
																"nodeType": "YulAssignment",
																"src": "3095:23:1",
																"value": {
																	"name": "dataArea",
																	"nodeType": "YulIdentifier",
																	"src": "3110:8:1"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nodeType": "YulIdentifier",
																		"src": "3095:11:1"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nodeType": "YulIdentifier",
																"src": "3077:10:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3089:2:1",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "lt",
															"nodeType": "YulIdentifier",
															"src": "3074:2:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "3074:18:1"
													},
													"nodeType": "YulIf",
													"src": "3071:49:1"
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "deleteStart",
																"nodeType": "YulIdentifier",
																"src": "3162:11:1"
															},
															{
																"arguments": [
																	{
																		"name": "dataArea",
																		"nodeType": "YulIdentifier",
																		"src": "3179:8:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "3207:3:1"
																			}
																		],
																		"functionName": {
																			"name": "divide_by_32_ceil",
																			"nodeType": "YulIdentifier",
																			"src": "3189:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3189:22:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3175:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3175:37:1"
															}
														],
														"functionName": {
															"name": "clear_storage_range_t_bytes1",
															"nodeType": "YulIdentifier",
															"src": "3133:28:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "3133:80:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3133:80:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nodeType": "YulIdentifier",
													"src": "2783:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2788:2:1",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "2780:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2780:11:1"
										},
										"nodeType": "YulIf",
										"src": "2777:446:1"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_t_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "2742:5:1",
									"type": ""
								},
								{
									"name": "len",
									"nodeType": "YulTypedName",
									"src": "2749:3:1",
									"type": ""
								},
								{
									"name": "startIndex",
									"nodeType": "YulTypedName",
									"src": "2754:10:1",
									"type": ""
								}
							],
							"src": "2687:543:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3299:54:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3309:37:1",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nodeType": "YulIdentifier",
													"src": "3334:4:1"
												},
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "3340:5:1"
												}
											],
											"functionName": {
												"name": "shr",
												"nodeType": "YulIdentifier",
												"src": "3330:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3330:16:1"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nodeType": "YulIdentifier",
												"src": "3309:8:1"
											}
										]
									}
								]
							},
							"name": "shift_right_unsigned_dynamic",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nodeType": "YulTypedName",
									"src": "3274:4:1",
									"type": ""
								},
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3280:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nodeType": "YulTypedName",
									"src": "3290:8:1",
									"type": ""
								}
							],
							"src": "3236:117:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3410:118:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3420:68:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3469:1:1",
																	"type": "",
																	"value": "8"
																},
																{
																	"name": "bytes",
																	"nodeType": "YulIdentifier",
																	"src": "3472:5:1"
																}
															],
															"functionName": {
																"name": "mul",
																"nodeType": "YulIdentifier",
																"src": "3465:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "3465:13:1"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3484:1:1",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nodeType": "YulIdentifier",
																"src": "3480:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "3480:6:1"
														}
													],
													"functionName": {
														"name": "shift_right_unsigned_dynamic",
														"nodeType": "YulIdentifier",
														"src": "3436:28:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3436:51:1"
												}
											],
											"functionName": {
												"name": "not",
												"nodeType": "YulIdentifier",
												"src": "3432:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3432:56:1"
										},
										"variables": [
											{
												"name": "mask",
												"nodeType": "YulTypedName",
												"src": "3424:4:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3497:25:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "3511:4:1"
												},
												{
													"name": "mask",
													"nodeType": "YulIdentifier",
													"src": "3517:4:1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "3507:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3507:15:1"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "3497:6:1"
											}
										]
									}
								]
							},
							"name": "mask_bytes_dynamic",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "3387:4:1",
									"type": ""
								},
								{
									"name": "bytes",
									"nodeType": "YulTypedName",
									"src": "3393:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "3403:6:1",
									"type": ""
								}
							],
							"src": "3359:169:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3614:214:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3747:37:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "3774:4:1"
												},
												{
													"name": "len",
													"nodeType": "YulIdentifier",
													"src": "3780:3:1"
												}
											],
											"functionName": {
												"name": "mask_bytes_dynamic",
												"nodeType": "YulIdentifier",
												"src": "3755:18:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3755:29:1"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "3747:4:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3793:29:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "3804:4:1"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3814:1:1",
															"type": "",
															"value": "2"
														},
														{
															"name": "len",
															"nodeType": "YulIdentifier",
															"src": "3817:3:1"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "3810:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3810:11:1"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "3801:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3801:21:1"
										},
										"variableNames": [
											{
												"name": "used",
												"nodeType": "YulIdentifier",
												"src": "3793:4:1"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "3595:4:1",
									"type": ""
								},
								{
									"name": "len",
									"nodeType": "YulTypedName",
									"src": "3601:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nodeType": "YulTypedName",
									"src": "3609:4:1",
									"type": ""
								}
							],
							"src": "3533:295:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3925:1303:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3936:51:1",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "3983:3:1"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "3950:32:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3950:37:1"
										},
										"variables": [
											{
												"name": "newLen",
												"nodeType": "YulTypedName",
												"src": "3940:6:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4072:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "4074:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "4074:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4074:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "4044:6:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4052:18:1",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "4041:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4041:30:1"
										},
										"nodeType": "YulIf",
										"src": "4038:56:1"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4104:52:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "slot",
															"nodeType": "YulIdentifier",
															"src": "4150:4:1"
														}
													],
													"functionName": {
														"name": "sload",
														"nodeType": "YulIdentifier",
														"src": "4144:5:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4144:11:1"
												}
											],
											"functionName": {
												"name": "extract_byte_array_length",
												"nodeType": "YulIdentifier",
												"src": "4118:25:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4118:38:1"
										},
										"variables": [
											{
												"name": "oldLen",
												"nodeType": "YulTypedName",
												"src": "4108:6:1",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nodeType": "YulIdentifier",
													"src": "4249:4:1"
												},
												{
													"name": "oldLen",
													"nodeType": "YulIdentifier",
													"src": "4255:6:1"
												},
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "4263:6:1"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nodeType": "YulIdentifier",
												"src": "4203:45:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4203:67:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4203:67:1"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4280:18:1",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "4297:1:1",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nodeType": "YulTypedName",
												"src": "4284:9:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "4308:17:1",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "4321:4:1",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nodeType": "YulIdentifier",
												"src": "4308:9:1"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4372:611:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4386:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4405:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4417:4:1",
																				"type": "",
																				"value": "0x1f"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4413:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4413:9:1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4401:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4401:22:1"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nodeType": "YulTypedName",
																	"src": "4390:7:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4437:51:1",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "4483:4:1"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "4451:31:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4451:37:1"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nodeType": "YulTypedName",
																	"src": "4441:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4501:10:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4510:1:1",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "4505:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4569:163:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "4594:6:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "4612:3:1"
																								},
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "4617:9:1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4608:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4608:19:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "4602:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4602:26:1"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nodeType": "YulIdentifier",
																				"src": "4587:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4587:42:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4587:42:1"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "4646:24:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "4660:6:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4668:1:1",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4656:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4656:14:1"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4646:6:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "4687:31:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nodeType": "YulIdentifier",
																					"src": "4704:9:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4715:2:1",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4700:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4700:18:1"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nodeType": "YulIdentifier",
																				"src": "4687:9:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4535:1:1"
																	},
																	{
																		"name": "loopEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4538:7:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4532:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4532:14:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4547:21:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4549:17:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "4558:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4561:4:1",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4554:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4554:12:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "4549:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4528:3:1",
																"statements": []
															},
															"src": "4524:208:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4768:156:1",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "4786:43:1",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "4813:3:1"
																						},
																						{
																							"name": "srcOffset",
																							"nodeType": "YulIdentifier",
																							"src": "4818:9:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4809:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4809:19:1"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "4803:5:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4803:26:1"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nodeType": "YulTypedName",
																				"src": "4790:9:1",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "4853:6:1"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nodeType": "YulIdentifier",
																							"src": "4880:9:1"
																						},
																						{
																							"arguments": [
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "4895:6:1"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4903:4:1",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "4891:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4891:17:1"
																						}
																					],
																					"functionName": {
																						"name": "mask_bytes_dynamic",
																						"nodeType": "YulIdentifier",
																						"src": "4861:18:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4861:48:1"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nodeType": "YulIdentifier",
																				"src": "4846:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4846:64:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4846:64:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4751:7:1"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4760:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4748:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4748:19:1"
															},
															"nodeType": "YulIf",
															"src": "4745:179:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "4944:4:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "newLen",
																						"nodeType": "YulIdentifier",
																						"src": "4958:6:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4966:1:1",
																						"type": "",
																						"value": "2"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "4954:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4954:14:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4970:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4950:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4950:22:1"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "4937:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4937:36:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4937:36:1"
														}
													]
												},
												"nodeType": "YulCase",
												"src": "4365:618:1",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4370:1:1",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5000:222:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5014:14:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5027:1:1",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5018:5:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5051:67:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5069:35:1",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "5088:3:1"
																						},
																						{
																							"name": "srcOffset",
																							"nodeType": "YulIdentifier",
																							"src": "5093:9:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5084:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5084:19:1"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "5078:5:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5078:26:1"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5069:5:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nodeType": "YulIdentifier",
																"src": "5044:6:1"
															},
															"nodeType": "YulIf",
															"src": "5041:77:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "5138:4:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5197:5:1"
																			},
																			{
																				"name": "newLen",
																				"nodeType": "YulIdentifier",
																				"src": "5204:6:1"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nodeType": "YulIdentifier",
																			"src": "5144:52:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5144:67:1"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "5131:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5131:81:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5131:81:1"
														}
													]
												},
												"nodeType": "YulCase",
												"src": "4992:230:1",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "4345:6:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4353:2:1",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "4342:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4342:14:1"
										},
										"nodeType": "YulSwitch",
										"src": "4335:887:1"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nodeType": "YulTypedName",
									"src": "3914:4:1",
									"type": ""
								},
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "3920:3:1",
									"type": ""
								}
							],
							"src": "3833:1395:1"
						}
					]
				},
				"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n",
				"id": 1,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x14F6 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x0 SWAP1 DUP2 PUSH3 0x2E SWAP2 SWAP1 PUSH3 0x2E2 JUMP JUMPDEST POP PUSH6 0x4E25ED2E700 PUSH1 0x1 SSTORE PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3C9 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0xEA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x100 JUMPI PUSH3 0xFF PUSH3 0xA2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x16A PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x12B JUMP JUMPDEST PUSH3 0x176 DUP7 DUP4 PUSH3 0x12B JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C3 PUSH3 0x1BD PUSH3 0x1B7 DUP5 PUSH3 0x18E JUMP JUMPDEST PUSH3 0x198 JUMP JUMPDEST PUSH3 0x18E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1DF DUP4 PUSH3 0x1A2 JUMP JUMPDEST PUSH3 0x1F7 PUSH3 0x1EE DUP3 PUSH3 0x1CA JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x138 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x20E PUSH3 0x1FF JUMP JUMPDEST PUSH3 0x21B DUP2 DUP5 DUP5 PUSH3 0x1D4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x243 JUMPI PUSH3 0x237 PUSH1 0x0 DUP3 PUSH3 0x204 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x221 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x292 JUMPI PUSH3 0x25C DUP2 PUSH3 0x106 JUMP JUMPDEST PUSH3 0x267 DUP5 PUSH3 0x11B JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x277 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x28F PUSH3 0x286 DUP6 PUSH3 0x11B JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x220 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2B7 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x297 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D2 DUP4 DUP4 PUSH3 0x2A4 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x2ED DUP3 PUSH3 0x68 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x309 JUMPI PUSH3 0x308 PUSH3 0x73 JUMP JUMPDEST JUMPDEST PUSH3 0x315 DUP3 SLOAD PUSH3 0xD1 JUMP JUMPDEST PUSH3 0x322 DUP3 DUP3 DUP6 PUSH3 0x247 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x35A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x345 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x351 DUP6 DUP3 PUSH3 0x2C4 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x3C1 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x36A DUP7 PUSH3 0x106 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x394 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x36D JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x3B4 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x3B0 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x2A4 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x111D DUP1 PUSH3 0x3D9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x117803E3 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x1D831D5C EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x2782CC7F EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x2C618954 EQ PUSH2 0xAB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0x1A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x84 SWAP2 SWAP1 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x209 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xABC JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x118 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F SWAP1 PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x125 SWAP1 PUSH2 0xBA0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x151 SWAP1 PUSH2 0xBA0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x173 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x181 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F0 SWAP1 PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x204 PUSH1 0x1 SLOAD PUSH2 0x33E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x25A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x251 SWAP1 PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6989 SWAP1 POP PUSH1 0x0 PUSH4 0x5F5E100 DUP3 PUSH1 0x1 SLOAD PUSH2 0x276 SWAP2 SWAP1 PUSH2 0xC0A JUMP JUMPDEST PUSH2 0x280 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP1 POP PUSH2 0x28B DUP2 PUSH2 0x557 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A2 SWAP1 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x31F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x316 SWAP1 PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH4 0x5F5E100 DUP4 PUSH2 0x352 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH4 0x5F5E100 DUP5 PUSH2 0x366 SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x373 DUP4 PUSH2 0x761 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP3 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST DUP3 PUSH2 0x39A SWAP2 SWAP1 PUSH2 0xE13 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B3 JUMPI PUSH2 0x3B2 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 PUSH1 0x3 DUP3 DUP7 PUSH2 0x404 SWAP2 SWAP1 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x40E SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x41C JUMPI POP PUSH1 0x0 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x491 JUMPI PUSH32 0x2C00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 DUP1 PUSH2 0x44E SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4A4 JUMPI PUSH2 0x4A3 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP1 PUSH2 0x4BB SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x4CE JUMPI PUSH2 0x4CD PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH2 0x508 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3EC JUMP JUMPDEST POP DUP2 PUSH2 0x529 PUSH3 0xF4240 DUP9 PUSH2 0x524 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST PUSH2 0x761 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53A SWAP3 SWAP2 SWAP1 PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP8 POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x564 DUP4 PUSH2 0x761 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x6 DUP2 GT PUSH2 0x5A3 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x58A SWAP2 SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP POP POP POP PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 PUSH2 0x5B2 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST DUP3 PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0xE13 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5D6 JUMPI PUSH2 0x5D5 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x608 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x733 JUMPI PUSH1 0x0 PUSH1 0x3 DUP3 DUP7 PUSH2 0x627 SWAP2 SWAP1 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x631 SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x63F JUMPI POP PUSH1 0x0 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6B4 JUMPI PUSH32 0x2C00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 DUP1 PUSH2 0x671 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x684 JUMPI PUSH2 0x683 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6C7 JUMPI PUSH2 0x6C6 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP1 PUSH2 0x6DE SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x6F1 JUMPI PUSH2 0x6F0 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH2 0x72B SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x60F JUMP JUMPDEST POP DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x745 SWAP2 SWAP1 PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP6 POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0x7A8 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x7DA JUMPI DUP1 DUP1 PUSH2 0x7C3 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x7D3 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7F6 JUMPI PUSH2 0x7F5 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x828 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x8B5 JUMPI PUSH1 0x1 DUP3 PUSH2 0x841 SWAP2 SWAP1 PUSH2 0xE47 JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x850 SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST PUSH1 0x30 PUSH2 0x85C SWAP2 SWAP1 PUSH2 0xE13 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x872 JUMPI PUSH2 0x871 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x8AE SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP5 POP PUSH2 0x82C JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8FB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x8E0 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x923 DUP3 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x92D DUP2 DUP6 PUSH2 0x8CC JUMP JUMPDEST SWAP4 POP PUSH2 0x93D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x946 DUP2 PUSH2 0x907 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x96B DUP2 DUP5 PUSH2 0x918 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x9C9 DUP3 PUSH2 0x907 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x9E8 JUMPI PUSH2 0x9E7 PUSH2 0x991 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9FB PUSH2 0x973 JUMP JUMPDEST SWAP1 POP PUSH2 0xA07 DUP3 DUP3 PUSH2 0x9C0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xA27 JUMPI PUSH2 0xA26 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH2 0xA30 DUP3 PUSH2 0x907 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5F PUSH2 0xA5A DUP5 PUSH2 0xA0C JUMP JUMPDEST PUSH2 0x9F1 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xA7B JUMPI PUSH2 0xA7A PUSH2 0x98C JUMP JUMPDEST JUMPDEST PUSH2 0xA86 DUP5 DUP3 DUP6 PUSH2 0xA3D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA3 JUMPI PUSH2 0xAA2 PUSH2 0x987 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAB3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA4C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAD2 JUMPI PUSH2 0xAD1 PUSH2 0x97D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAF0 JUMPI PUSH2 0xAEF PUSH2 0x982 JUMP JUMPDEST JUMPDEST PUSH2 0xAFC DUP5 DUP3 DUP6 ADD PUSH2 0xA8E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x506C65617365206C6F67696E2066697273742E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3B PUSH1 0x13 DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP2 POP PUSH2 0xB46 DUP3 PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB6A DUP2 PUSH2 0xB2E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xBB8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xBCB JUMPI PUSH2 0xBCA PUSH2 0xB71 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC15 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xC20 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC2E DUP2 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xC45 JUMPI PUSH2 0xC44 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC86 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xC91 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xCA1 JUMPI PUSH2 0xCA0 PUSH2 0xC4C JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x58797E30316B212A000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCED PUSH1 0x8 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0xCF8 DUP3 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0E DUP3 PUSH2 0xCE0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP3 PUSH2 0xD18 JUMP JUMPDEST PUSH2 0xD43 DUP2 DUP6 PUSH2 0xD23 JUMP JUMPDEST SWAP4 POP PUSH2 0xD53 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x8DD JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6B DUP3 DUP5 PUSH2 0xD2E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E636F72726563742070617373776F72642E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDAC PUSH1 0x13 DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP2 POP PUSH2 0xDB7 DUP3 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDDB DUP2 PUSH2 0xD9F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDED DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xDF8 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xE08 JUMPI PUSH2 0xE07 PUSH2 0xC4C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE1E DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE29 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE41 JUMPI PUSH2 0xE40 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE52 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE5D DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE75 JUMPI PUSH2 0xE74 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE86 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xEB8 JUMPI PUSH2 0xEB7 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF28 PUSH1 0x1 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0xF33 DUP3 PUSH2 0xEF2 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF49 DUP3 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0xF53 DUP2 DUP6 PUSH2 0xCAC JUMP JUMPDEST SWAP4 POP PUSH2 0xF63 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x8DD JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x3020425443000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA5 PUSH1 0x5 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0xFB0 DUP3 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0x5 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC7 DUP3 DUP6 PUSH2 0xD2E JUMP JUMPDEST SWAP2 POP PUSH2 0xFD2 DUP3 PUSH2 0xF1B JUMP JUMPDEST SWAP2 POP PUSH2 0xFDE DUP3 DUP5 PUSH2 0xF3E JUMP JUMPDEST SWAP2 POP PUSH2 0xFE9 DUP3 PUSH2 0xF98 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x2400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x102B PUSH1 0x1 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0x1036 DUP3 PUSH2 0xFF5 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2E30300000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1077 PUSH1 0x3 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0x1082 DUP3 PUSH2 0x1041 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1098 DUP3 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x10A4 DUP3 DUP5 PUSH2 0xF3E JUMP JUMPDEST SWAP2 POP PUSH2 0x10AF DUP3 PUSH2 0x106A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C5 DUP3 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x10D1 DUP3 DUP5 PUSH2 0xD2E JUMP JUMPDEST SWAP2 POP PUSH2 0x10DC DUP3 PUSH2 0x106A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 INVALID DELEGATECALL 0xC2 PREVRANDAO COINBASE SWAP2 CODECOPY 0x4C MLOAD CALLDATACOPY 0xD4 0xD5 0xED 0x4C AND PUSH5 0xCBB8D15EB6 JUMP CALLDATASIZE CALLVALUE 0x2C 0x5E SELFDESTRUCT EXTCODESIZE 0xBA 0x4C SWAP14 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER 0x4C PUSH6 0x646765722D4E PUSH2 0x6E6F 0x2D PC KECCAK256 0x28 MSTORE PUSH6 0x636F676E697A PUSH6 0x642048415244 JUMPI COINBASE MSTORE GASLIMIT 0x29 ",
		"sourceMap": "60:3034:0:-:0;;;85:60;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;180:13;152:41;;224:5;200:29;;;;;;;;;;;;;;;;;;;;60:3034;;;;;;;;;;;;7:99:1;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;60:3034:0:-;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "password",
					"type": "string"
				}
			],
			"name": "AUTHORIZATION",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "CONVERSION",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "OWNER",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "TOKENS",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 4,
				"contract": "Solidity.sol:HARDWARE",
				"label": "owner",
				"offset": 0,
				"slot": "0",
				"type": "t_string_storage"
			},
			{
				"astId": 11,
				"contract": "Solidity.sol:HARDWARE",
				"label": "btcAmount",
				"offset": 0,
				"slot": "1",
				"type": "t_uint256"
			},
			{
				"astId": 14,
				"contract": "Solidity.sol:HARDWARE",
				"label": "loggedIn",
				"offset": 0,
				"slot": "2",
				"type": "t_bool"
			}
		],
		"types": {
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var hardwareContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"AUTHORIZATION\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONVERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]);\nvar hardware = hardwareContract.deploy({\n     data: '', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"2c618954": "AUTHORIZATION(string)",
		"2782cc7f": "CONVERSION()",
		"117803e3": "OWNER()",
		"1d831d5c": "TOKENS()"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "876200",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"AUTHORIZATION(string)": "infinite",
			"CONVERSION()": "infinite",
			"OWNER()": "infinite",
			"TOKENS()": "infinite"
		},
		"Internal": {
			"formatBTC(uint256)": "infinite",
			"formatUSD(uint256)": "infinite",
			"uintToString(uint256)": "infinite"
		}
	},
	"devdoc": {
		"kind": "dev",
		"methods": {},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@AUTHORIZATION_57": {
				"entryPoint": 658,
				"id": 57,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@CONVERSION_84": {
				"entryPoint": 521,
				"id": 84,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@OWNER_94": {
				"entryPoint": 199,
				"id": 94,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@TOKENS_106": {
				"entryPoint": 424,
				"id": 106,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@formatBTC_339": {
				"entryPoint": 830,
				"id": 339,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@formatUSD_217": {
				"entryPoint": 1367,
				"id": 217,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@uintToString_425": {
				"entryPoint": 1889,
				"id": 425,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_decode_available_length_t_string_memory_ptr": {
				"entryPoint": 2636,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_t_string_memory_ptr": {
				"entryPoint": 2702,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_string_memory_ptr": {
				"entryPoint": 2748,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 3374,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 2328,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 3902,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 2862,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 3867,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 4202,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 3296,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 3992,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 3487,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 4126,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 3423,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_packed_t_bytes_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba__to_t_bytes_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 4027,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_packed_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 3331,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_packed_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_t_bytes_memory_ptr_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f__to_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 4282,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_packed_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_t_string_memory_ptr_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 4237,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 2385,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 2897,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 3522,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"allocate_memory": {
				"entryPoint": 2545,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": 2419,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_allocation_size_t_string_memory_ptr": {
				"entryPoint": 2572,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_bytes_memory_ptr": {
				"entryPoint": 3352,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 2241,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 3363,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 2252,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 3244,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 3603,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_div_t_uint256": {
				"entryPoint": 3195,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 3082,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint256": {
				"entryPoint": 3655,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 3025,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_calldata_to_memory_with_cleanup": {
				"entryPoint": 2621,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 2269,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 2976,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"finalize_allocation": {
				"entryPoint": 2496,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"increment_t_uint256": {
				"entryPoint": 3707,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"mod_t_uint256": {
				"entryPoint": 3554,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 3035,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x12": {
				"entryPoint": 3148,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x22": {
				"entryPoint": 2929,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x32": {
				"entryPoint": 3779,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 2449,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
				"entryPoint": 2439,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
				"entryPoint": 2444,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": 2434,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 2429,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 2311,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"store_literal_in_memory_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5": {
				"entryPoint": 2821,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf": {
				"entryPoint": 3826,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f": {
				"entryPoint": 4161,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750": {
				"entryPoint": 3255,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba": {
				"entryPoint": 3951,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c": {
				"entryPoint": 3446,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88": {
				"entryPoint": 4085,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:16103:1",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "66:40:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "77:22:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "93:5:1"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "87:5:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "87:12:1"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "77:6:1"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "49:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "59:6:1",
									"type": ""
								}
							],
							"src": "7:99:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "208:73:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "225:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "230:6:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "218:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "218:19:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "218:19:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "246:29:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "265:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "270:4:1",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "261:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "261:14:1"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "246:11:1"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "180:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "185:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "196:11:1",
									"type": ""
								}
							],
							"src": "112:169:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "349:184:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "359:10:1",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "368:1:1",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nodeType": "YulTypedName",
												"src": "363:1:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "428:63:1",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "453:3:1"
																	},
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "458:1:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "449:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "449:11:1"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "472:3:1"
																			},
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "477:1:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "468:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "468:11:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "462:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "462:18:1"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "442:6:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "442:39:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "442:39:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "389:1:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "392:6:1"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "386:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "386:13:1"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "400:19:1",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "402:15:1",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "411:1:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "414:2:1",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "407:3:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "407:10:1"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "402:1:1"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "382:3:1",
											"statements": []
										},
										"src": "378:113:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "511:3:1"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "516:6:1"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "507:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "507:16:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "525:1:1",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "500:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "500:27:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "500:27:1"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "331:3:1",
									"type": ""
								},
								{
									"name": "dst",
									"nodeType": "YulTypedName",
									"src": "336:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "341:6:1",
									"type": ""
								}
							],
							"src": "287:246:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "587:54:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "597:38:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "615:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "622:2:1",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "611:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "611:14:1"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "631:2:1",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "627:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "627:7:1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "607:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "607:28:1"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "597:6:1"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "570:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "580:6:1",
									"type": ""
								}
							],
							"src": "539:102:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "739:285:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "749:53:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "796:5:1"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "763:32:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "763:39:1"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "753:6:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "811:78:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "877:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "882:6:1"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "818:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "818:71:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "811:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "937:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "944:4:1",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "933:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "933:16:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "951:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "956:6:1"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "898:34:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "898:65:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "898:65:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "972:46:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "983:3:1"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1010:6:1"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nodeType": "YulIdentifier",
														"src": "988:21:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "988:29:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "979:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "979:39:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "972:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "720:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "727:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "735:3:1",
									"type": ""
								}
							],
							"src": "647:377:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1148:195:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1158:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "1170:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1181:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "1166:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1166:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "1158:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1205:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1216:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1201:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1201:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "1224:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1230:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1220:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "1220:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1194:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1194:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1194:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1250:86:1",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "1322:6:1"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "1331:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "1258:63:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1258:78:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "1250:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1120:9:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1132:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "1143:4:1",
									"type": ""
								}
							],
							"src": "1030:313:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1389:35:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1399:19:1",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1415:2:1",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "1409:5:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1409:9:1"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "1399:6:1"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "1382:6:1",
									"type": ""
								}
							],
							"src": "1349:75:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1519:28:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1536:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1539:1:1",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1529:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1529:12:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1529:12:1"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nodeType": "YulFunctionDefinition",
							"src": "1430:117:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1642:28:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1659:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1662:1:1",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1652:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1652:12:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1652:12:1"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nodeType": "YulFunctionDefinition",
							"src": "1553:117:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1765:28:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1782:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1785:1:1",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1775:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1775:12:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1775:12:1"
									}
								]
							},
							"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
							"nodeType": "YulFunctionDefinition",
							"src": "1676:117:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1888:28:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1905:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1908:1:1",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1898:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1898:12:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1898:12:1"
									}
								]
							},
							"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
							"nodeType": "YulFunctionDefinition",
							"src": "1799:117:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1950:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1967:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1970:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1960:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "1960:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1960:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2064:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2067:4:1",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2057:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2057:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2057:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2088:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2091:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "2081:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2081:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2081:15:1"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "1922:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2151:238:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2161:58:1",
										"value": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "2183:6:1"
												},
												{
													"arguments": [
														{
															"name": "size",
															"nodeType": "YulIdentifier",
															"src": "2213:4:1"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nodeType": "YulIdentifier",
														"src": "2191:21:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2191:27:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2179:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2179:40:1"
										},
										"variables": [
											{
												"name": "newFreePtr",
												"nodeType": "YulTypedName",
												"src": "2165:10:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2330:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "2332:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "2332:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2332:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "2273:10:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2285:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2270:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2270:34:1"
												},
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "2309:10:1"
														},
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "2321:6:1"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "2306:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2306:22:1"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "2267:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2267:62:1"
										},
										"nodeType": "YulIf",
										"src": "2264:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2368:2:1",
													"type": "",
													"value": "64"
												},
												{
													"name": "newFreePtr",
													"nodeType": "YulIdentifier",
													"src": "2372:10:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2361:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2361:22:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2361:22:1"
									}
								]
							},
							"name": "finalize_allocation",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "2137:6:1",
									"type": ""
								},
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "2145:4:1",
									"type": ""
								}
							],
							"src": "2108:281:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2436:88:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2446:30:1",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "allocate_unbounded",
												"nodeType": "YulIdentifier",
												"src": "2456:18:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2456:20:1"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "2446:6:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "2505:6:1"
												},
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "2513:4:1"
												}
											],
											"functionName": {
												"name": "finalize_allocation",
												"nodeType": "YulIdentifier",
												"src": "2485:19:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2485:33:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2485:33:1"
									}
								]
							},
							"name": "allocate_memory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "2420:4:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "2429:6:1",
									"type": ""
								}
							],
							"src": "2395:129:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2597:241:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2702:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "2704:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "2704:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2704:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "2674:6:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2682:18:1",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "2671:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2671:30:1"
										},
										"nodeType": "YulIf",
										"src": "2668:56:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2734:37:1",
										"value": {
											"arguments": [
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "2764:6:1"
												}
											],
											"functionName": {
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulIdentifier",
												"src": "2742:21:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2742:29:1"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "2734:4:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2808:23:1",
										"value": {
											"arguments": [
												{
													"name": "size",
													"nodeType": "YulIdentifier",
													"src": "2820:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2826:4:1",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2816:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2816:15:1"
										},
										"variableNames": [
											{
												"name": "size",
												"nodeType": "YulIdentifier",
												"src": "2808:4:1"
											}
										]
									}
								]
							},
							"name": "array_allocation_size_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "2581:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "size",
									"nodeType": "YulTypedName",
									"src": "2592:4:1",
									"type": ""
								}
							],
							"src": "2530:308:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2908:82:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "dst",
													"nodeType": "YulIdentifier",
													"src": "2931:3:1"
												},
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "2936:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "2941:6:1"
												}
											],
											"functionName": {
												"name": "calldatacopy",
												"nodeType": "YulIdentifier",
												"src": "2918:12:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2918:30:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2918:30:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "2968:3:1"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "2973:6:1"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2964:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "2964:16:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2982:1:1",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2957:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "2957:27:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2957:27:1"
									}
								]
							},
							"name": "copy_calldata_to_memory_with_cleanup",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "2890:3:1",
									"type": ""
								},
								{
									"name": "dst",
									"nodeType": "YulTypedName",
									"src": "2895:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "2900:6:1",
									"type": ""
								}
							],
							"src": "2844:146:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3080:341:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3090:75:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "3157:6:1"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "3115:41:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3115:49:1"
												}
											],
											"functionName": {
												"name": "allocate_memory",
												"nodeType": "YulIdentifier",
												"src": "3099:15:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3099:66:1"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "3090:5:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "3181:5:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3188:6:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3174:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3174:21:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3174:21:1"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3204:27:1",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "3219:5:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3226:4:1",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3215:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3215:16:1"
										},
										"variables": [
											{
												"name": "dst",
												"nodeType": "YulTypedName",
												"src": "3208:3:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3269:83:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
															"nodeType": "YulIdentifier",
															"src": "3271:77:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "3271:79:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3271:79:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "src",
															"nodeType": "YulIdentifier",
															"src": "3250:3:1"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "3255:6:1"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3246:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3246:16:1"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "3264:3:1"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "3243:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3243:25:1"
										},
										"nodeType": "YulIf",
										"src": "3240:112:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "3398:3:1"
												},
												{
													"name": "dst",
													"nodeType": "YulIdentifier",
													"src": "3403:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3408:6:1"
												}
											],
											"functionName": {
												"name": "copy_calldata_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "3361:36:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3361:54:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3361:54:1"
									}
								]
							},
							"name": "abi_decode_available_length_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "3053:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "3058:6:1",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3066:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "3074:5:1",
									"type": ""
								}
							],
							"src": "2996:425:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3503:278:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3552:83:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
															"nodeType": "YulIdentifier",
															"src": "3554:77:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "3554:79:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3554:79:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "3531:6:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3539:4:1",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3527:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "3527:17:1"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "3546:3:1"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "3523:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3523:27:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "3516:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3516:35:1"
										},
										"nodeType": "YulIf",
										"src": "3513:122:1"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3644:34:1",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "3671:6:1"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "3658:12:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3658:20:1"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "3648:6:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3687:88:1",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "3748:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3756:4:1",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3744:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3744:17:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "3763:6:1"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "3771:3:1"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "3696:47:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3696:79:1"
										},
										"variableNames": [
											{
												"name": "array",
												"nodeType": "YulIdentifier",
												"src": "3687:5:1"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "3481:6:1",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3489:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "3497:5:1",
									"type": ""
								}
							],
							"src": "3441:340:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3863:433:1",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3909:83:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "3911:77:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "3911:79:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3911:79:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3884:7:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3893:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "3880:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "3880:23:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3905:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "3876:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "3876:32:1"
										},
										"nodeType": "YulIf",
										"src": "3873:119:1"
									},
									{
										"nodeType": "YulBlock",
										"src": "4002:287:1",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4017:45:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4048:9:1"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4059:1:1",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4044:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "4044:17:1"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4031:12:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4031:31:1"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4021:6:1",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4109:83:1",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nodeType": "YulIdentifier",
																	"src": "4111:77:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4111:79:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4111:79:1"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "4081:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4089:18:1",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "4078:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4078:30:1"
												},
												"nodeType": "YulIf",
												"src": "4075:117:1"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4206:73:1",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4251:9:1"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "4262:6:1"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4247:3:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "4247:22:1"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4271:7:1"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_memory_ptr",
														"nodeType": "YulIdentifier",
														"src": "4216:30:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4216:63:1"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4206:6:1"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3833:9:1",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "3844:7:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3856:6:1",
									"type": ""
								}
							],
							"src": "3787:509:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4408:63:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "4430:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4438:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4426:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "4426:14:1"
												},
												{
													"hexValue": "506c65617365206c6f67696e2066697273742e",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "4442:21:1",
													"type": "",
													"value": "Please login first."
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4419:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4419:45:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4419:45:1"
									}
								]
							},
							"name": "store_literal_in_memory_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "4400:6:1",
									"type": ""
								}
							],
							"src": "4302:169:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4623:220:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4633:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4699:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4704:2:1",
													"type": "",
													"value": "19"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4640:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4640:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "4633:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4805:3:1"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5",
												"nodeType": "YulIdentifier",
												"src": "4716:88:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4716:93:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4716:93:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "4818:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4829:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4834:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4825:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "4825:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "4818:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "4611:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "4619:3:1",
									"type": ""
								}
							],
							"src": "4477:366:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5020:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5030:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5042:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5053:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5038:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5038:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5030:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5077:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5088:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5073:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "5073:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "5096:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5102:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "5092:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "5092:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5066:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5066:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5066:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5122:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "5256:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5130:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5130:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5122:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "5000:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "5015:4:1",
									"type": ""
								}
							],
							"src": "4849:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5302:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5319:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5322:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5312:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5312:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5312:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5416:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5419:4:1",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5409:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5409:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5409:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5440:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5443:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "5433:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5433:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5433:15:1"
									}
								]
							},
							"name": "panic_error_0x22",
							"nodeType": "YulFunctionDefinition",
							"src": "5274:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5511:269:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5521:22:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "5535:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5541:1:1",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "5531:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5531:12:1"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "5521:6:1"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5552:38:1",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "5582:4:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5588:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "5578:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5578:12:1"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nodeType": "YulTypedName",
												"src": "5556:18:1",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5629:51:1",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "5643:27:1",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "5657:6:1"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5665:4:1",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nodeType": "YulIdentifier",
															"src": "5653:3:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "5653:17:1"
													},
													"variableNames": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "5643:6:1"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "5609:18:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "5602:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5602:26:1"
										},
										"nodeType": "YulIf",
										"src": "5599:81:1"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5732:42:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nodeType": "YulIdentifier",
															"src": "5746:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "5746:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5746:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "5696:18:1"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "5719:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5727:2:1",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "5716:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "5716:14:1"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "5693:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5693:38:1"
										},
										"nodeType": "YulIf",
										"src": "5690:84:1"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "5495:4:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "5504:6:1",
									"type": ""
								}
							],
							"src": "5460:320:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5831:32:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5841:16:1",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "5852:5:1"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "5841:7:1"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "5813:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "5823:7:1",
									"type": ""
								}
							],
							"src": "5786:77:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5897:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5914:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5917:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5907:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "5907:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5907:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6011:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6014:4:1",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6004:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6004:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6004:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6035:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6038:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "6028:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6028:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6028:15:1"
									}
								]
							},
							"name": "panic_error_0x11",
							"nodeType": "YulFunctionDefinition",
							"src": "5869:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6103:362:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6113:25:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6136:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6118:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6118:20:1"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "6113:1:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6147:25:1",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6170:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6152:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6152:20:1"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "6147:1:1"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6181:28:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6204:1:1"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6207:1:1"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "6200:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6200:9:1"
										},
										"variables": [
											{
												"name": "product_raw",
												"nodeType": "YulTypedName",
												"src": "6185:11:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6218:41:1",
										"value": {
											"arguments": [
												{
													"name": "product_raw",
													"nodeType": "YulIdentifier",
													"src": "6247:11:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6229:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6229:30:1"
										},
										"variableNames": [
											{
												"name": "product",
												"nodeType": "YulIdentifier",
												"src": "6218:7:1"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6436:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "6438:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "6438:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6438:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6369:1:1"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "6362:6:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "6362:9:1"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6392:1:1"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nodeType": "YulIdentifier",
																			"src": "6399:7:1"
																		},
																		{
																			"name": "x",
																			"nodeType": "YulIdentifier",
																			"src": "6408:1:1"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nodeType": "YulIdentifier",
																		"src": "6395:3:1"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6395:15:1"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "6389:2:1"
															},
															"nodeType": "YulFunctionCall",
															"src": "6389:22:1"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "6342:2:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "6342:83:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "6322:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6322:113:1"
										},
										"nodeType": "YulIf",
										"src": "6319:139:1"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "6086:1:1",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "6089:1:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nodeType": "YulTypedName",
									"src": "6095:7:1",
									"type": ""
								}
							],
							"src": "6055:410:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6499:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6516:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6519:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6509:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6509:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6509:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6613:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6616:4:1",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6606:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6606:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6606:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6637:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6640:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "6630:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6630:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6630:15:1"
									}
								]
							},
							"name": "panic_error_0x12",
							"nodeType": "YulFunctionDefinition",
							"src": "6471:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6699:143:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6709:25:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6732:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6714:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6714:20:1"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "6709:1:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6743:25:1",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6766:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6748:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6748:20:1"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "6743:1:1"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6790:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x12",
															"nodeType": "YulIdentifier",
															"src": "6792:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "6792:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6792:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6787:1:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "6780:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6780:9:1"
										},
										"nodeType": "YulIf",
										"src": "6777:35:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6822:14:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6831:1:1"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6834:1:1"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "6827:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "6827:9:1"
										},
										"variableNames": [
											{
												"name": "r",
												"nodeType": "YulIdentifier",
												"src": "6822:1:1"
											}
										]
									}
								]
							},
							"name": "checked_div_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "6688:1:1",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "6691:1:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "r",
									"nodeType": "YulTypedName",
									"src": "6697:1:1",
									"type": ""
								}
							],
							"src": "6657:185:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6962:34:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6972:18:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "6987:3:1"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "6972:11:1"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "6934:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "6939:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "6950:11:1",
									"type": ""
								}
							],
							"src": "6848:148:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7108:52:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "7130:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7138:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7126:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "7126:14:1"
												},
												{
													"hexValue": "58797e30316b212a",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "7142:10:1",
													"type": "",
													"value": "Xy~01k!*"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7119:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7119:34:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7119:34:1"
									}
								]
							},
							"name": "store_literal_in_memory_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "7100:6:1",
									"type": ""
								}
							],
							"src": "7002:158:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7330:236:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7340:91:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7424:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7429:1:1",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7347:76:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7347:84:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "7340:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7529:3:1"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750",
												"nodeType": "YulIdentifier",
												"src": "7440:88:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7440:93:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7440:93:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7542:18:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7553:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7558:1:1",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "7549:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7549:11:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "7542:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "7318:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "7326:3:1",
									"type": ""
								}
							],
							"src": "7166:400:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7761:192:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7772:155:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7923:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7779:142:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "7779:148:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "7772:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "7937:10:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "7944:3:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "7937:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "7748:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "7757:3:1",
									"type": ""
								}
							],
							"src": "7572:381:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8017:40:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8028:22:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "8044:5:1"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "8038:5:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8038:12:1"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "8028:6:1"
											}
										]
									}
								]
							},
							"name": "array_length_t_bytes_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8000:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "8010:6:1",
									"type": ""
								}
							],
							"src": "7959:98:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8176:34:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8186:18:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "8201:3:1"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "8186:11:1"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "8148:3:1",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "8153:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "8164:11:1",
									"type": ""
								}
							],
							"src": "8063:147:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8324:278:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "8334:52:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "8380:5:1"
												}
											],
											"functionName": {
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "8348:31:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8348:38:1"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "8338:6:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "8395:95:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8478:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "8483:6:1"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "8402:75:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8402:88:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "8395:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "8538:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8545:4:1",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8534:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "8534:16:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8552:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "8557:6:1"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "8499:34:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8499:65:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8499:65:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "8573:23:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8584:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "8589:6:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8580:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8580:16:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "8573:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8305:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "8312:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "8320:3:1",
									"type": ""
								}
							],
							"src": "8216:386:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8742:137:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8753:100:1",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "8840:6:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8849:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "8760:79:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "8760:93:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "8753:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "8863:10:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "8870:3:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "8863:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "8721:3:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "8727:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "8738:3:1",
									"type": ""
								}
							],
							"src": "8608:271:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8991:63:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "9013:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9021:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9009:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "9009:14:1"
												},
												{
													"hexValue": "496e636f72726563742070617373776f72642e",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "9025:21:1",
													"type": "",
													"value": "Incorrect password."
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9002:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9002:45:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9002:45:1"
									}
								]
							},
							"name": "store_literal_in_memory_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "8983:6:1",
									"type": ""
								}
							],
							"src": "8885:169:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9206:220:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9216:74:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9282:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9287:2:1",
													"type": "",
													"value": "19"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9223:58:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9223:67:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "9216:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9388:3:1"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c",
												"nodeType": "YulIdentifier",
												"src": "9299:88:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9299:93:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9299:93:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9401:19:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9412:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9417:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9408:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9408:12:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "9401:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "9194:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "9202:3:1",
									"type": ""
								}
							],
							"src": "9060:366:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9603:248:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9613:26:1",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "9625:9:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9636:2:1",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9621:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9621:18:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9613:4:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9660:9:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9671:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9656:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "9656:17:1"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "9679:4:1"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9685:9:1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "9675:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "9675:20:1"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9649:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9649:47:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9649:47:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9705:139:1",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "9839:4:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9713:124:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9713:131:1"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9705:4:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "9583:9:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "9598:4:1",
									"type": ""
								}
							],
							"src": "9432:419:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9891:142:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9901:25:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "9924:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "9906:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9906:20:1"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "9901:1:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "9935:25:1",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "9958:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "9940:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9940:20:1"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "9935:1:1"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "9982:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x12",
															"nodeType": "YulIdentifier",
															"src": "9984:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "9984:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "9984:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "9979:1:1"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "9972:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "9972:9:1"
										},
										"nodeType": "YulIf",
										"src": "9969:35:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "10013:14:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "10022:1:1"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "10025:1:1"
												}
											],
											"functionName": {
												"name": "mod",
												"nodeType": "YulIdentifier",
												"src": "10018:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10018:9:1"
										},
										"variableNames": [
											{
												"name": "r",
												"nodeType": "YulIdentifier",
												"src": "10013:1:1"
											}
										]
									}
								]
							},
							"name": "mod_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "9880:1:1",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "9883:1:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "r",
									"nodeType": "YulTypedName",
									"src": "9889:1:1",
									"type": ""
								}
							],
							"src": "9857:176:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10083:147:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10093:25:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "10116:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "10098:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10098:20:1"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "10093:1:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "10127:25:1",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "10150:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "10132:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10132:20:1"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "10127:1:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "10161:16:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "10172:1:1"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "10175:1:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10168:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10168:9:1"
										},
										"variableNames": [
											{
												"name": "sum",
												"nodeType": "YulIdentifier",
												"src": "10161:3:1"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "10201:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "10203:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "10203:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "10203:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "10193:1:1"
												},
												{
													"name": "sum",
													"nodeType": "YulIdentifier",
													"src": "10196:3:1"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "10190:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10190:10:1"
										},
										"nodeType": "YulIf",
										"src": "10187:36:1"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "10070:1:1",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "10073:1:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nodeType": "YulTypedName",
									"src": "10079:3:1",
									"type": ""
								}
							],
							"src": "10039:191:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10281:149:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10291:25:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "10314:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "10296:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10296:20:1"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "10291:1:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "10325:25:1",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "10348:1:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "10330:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10330:20:1"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "10325:1:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "10359:17:1",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "10371:1:1"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "10374:1:1"
												}
											],
											"functionName": {
												"name": "sub",
												"nodeType": "YulIdentifier",
												"src": "10367:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10367:9:1"
										},
										"variableNames": [
											{
												"name": "diff",
												"nodeType": "YulIdentifier",
												"src": "10359:4:1"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "10401:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "10403:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "10403:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "10403:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nodeType": "YulIdentifier",
													"src": "10392:4:1"
												},
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "10398:1:1"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "10389:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10389:11:1"
										},
										"nodeType": "YulIf",
										"src": "10386:37:1"
									}
								]
							},
							"name": "checked_sub_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "10267:1:1",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "10270:1:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nodeType": "YulTypedName",
									"src": "10276:4:1",
									"type": ""
								}
							],
							"src": "10236:194:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10479:190:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10489:33:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "10516:5:1"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "10498:17:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10498:24:1"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "10489:5:1"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "10612:22:1",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "10614:16:1"
														},
														"nodeType": "YulFunctionCall",
														"src": "10614:18:1"
													},
													"nodeType": "YulExpressionStatement",
													"src": "10614:18:1"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "10537:5:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10544:66:1",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "10534:2:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10534:77:1"
										},
										"nodeType": "YulIf",
										"src": "10531:103:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "10643:20:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "10654:5:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10661:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10650:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10650:13:1"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "10643:3:1"
											}
										]
									}
								]
							},
							"name": "increment_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "10465:5:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "10475:3:1",
									"type": ""
								}
							],
							"src": "10436:233:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10703:152:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10720:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10723:77:1",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10713:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10713:88:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10713:88:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10817:1:1",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10820:4:1",
													"type": "",
													"value": "0x32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10810:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10810:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10810:15:1"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10841:1:1",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10844:4:1",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "10834:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10834:15:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10834:15:1"
									}
								]
							},
							"name": "panic_error_0x32",
							"nodeType": "YulFunctionDefinition",
							"src": "10675:180:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10967:45:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "10989:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10997:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10985:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "10985:14:1"
												},
												{
													"hexValue": "2e",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "11001:3:1",
													"type": "",
													"value": "."
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10978:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "10978:27:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10978:27:1"
									}
								]
							},
							"name": "store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "10959:6:1",
									"type": ""
								}
							],
							"src": "10861:151:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11182:236:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11192:91:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11276:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11281:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "11199:76:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11199:84:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "11192:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11381:3:1"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
												"nodeType": "YulIdentifier",
												"src": "11292:88:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11292:93:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11292:93:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "11394:18:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11405:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11410:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "11401:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11401:11:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "11394:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "11170:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "11178:3:1",
									"type": ""
								}
							],
							"src": "11018:400:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11534:280:1",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "11544:53:1",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "11591:5:1"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "11558:32:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11558:39:1"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "11548:6:1",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "11606:96:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11690:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "11695:6:1"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "11613:76:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11613:89:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "11606:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "11750:5:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11757:4:1",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11746:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "11746:16:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11764:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "11769:6:1"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "11711:34:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11711:65:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11711:65:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "11785:23:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11796:3:1"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "11801:6:1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "11792:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11792:16:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "11785:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "11515:5:1",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "11522:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "11530:3:1",
									"type": ""
								}
							],
							"src": "11424:390:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11926:49:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "11948:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11956:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11944:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "11944:14:1"
												},
												{
													"hexValue": "3020425443",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "11960:7:1",
													"type": "",
													"value": "0 BTC"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11937:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "11937:31:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11937:31:1"
									}
								]
							},
							"name": "store_literal_in_memory_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "11918:6:1",
									"type": ""
								}
							],
							"src": "11820:155:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12145:236:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12155:91:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "12239:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12244:1:1",
													"type": "",
													"value": "5"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "12162:76:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12162:84:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "12155:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "12344:3:1"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba",
												"nodeType": "YulIdentifier",
												"src": "12255:88:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12255:93:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12255:93:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "12357:18:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "12368:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12373:1:1",
													"type": "",
													"value": "5"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "12364:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12364:11:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "12357:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "12133:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "12141:3:1",
									"type": ""
								}
							],
							"src": "11981:400:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12771:579:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12782:100:1",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "12869:6:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "12878:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "12789:79:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12789:93:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "12782:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "12892:155:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13043:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "12899:142:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "12899:148:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "12892:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "13057:102:1",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "13146:6:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13155:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "13064:81:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "13064:95:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "13057:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "13169:155:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13320:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "13176:142:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "13176:148:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "13169:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "13334:10:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "13341:3:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "13334:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_bytes_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba__to_t_bytes_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "12742:3:1",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "12748:6:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "12756:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "12767:3:1",
									"type": ""
								}
							],
							"src": "12387:963:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13462:45:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "13484:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13492:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13480:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "13480:14:1"
												},
												{
													"hexValue": "24",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "13496:3:1",
													"type": "",
													"value": "$"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "13473:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "13473:27:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13473:27:1"
									}
								]
							},
							"name": "store_literal_in_memory_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "13454:6:1",
									"type": ""
								}
							],
							"src": "13356:151:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13677:236:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "13687:91:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13771:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13776:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "13694:76:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "13694:84:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "13687:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13876:3:1"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88",
												"nodeType": "YulIdentifier",
												"src": "13787:88:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "13787:93:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13787:93:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "13889:18:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13900:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13905:1:1",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "13896:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "13896:11:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "13889:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "13665:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "13673:3:1",
									"type": ""
								}
							],
							"src": "13513:400:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14025:47:1",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "14047:6:1"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14055:1:1",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14043:3:1"
													},
													"nodeType": "YulFunctionCall",
													"src": "14043:14:1"
												},
												{
													"hexValue": "2e3030",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "14059:5:1",
													"type": "",
													"value": ".00"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "14036:6:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "14036:29:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14036:29:1"
									}
								]
							},
							"name": "store_literal_in_memory_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "14017:6:1",
									"type": ""
								}
							],
							"src": "13919:153:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14242:236:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "14252:91:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14336:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14341:1:1",
													"type": "",
													"value": "3"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14259:76:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "14259:84:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "14252:3:1"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14441:3:1"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f",
												"nodeType": "YulIdentifier",
												"src": "14352:88:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "14352:93:1"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14352:93:1"
									},
									{
										"nodeType": "YulAssignment",
										"src": "14454:18:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14465:3:1"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14470:1:1",
													"type": "",
													"value": "3"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "14461:3:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "14461:11:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "14454:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "14230:3:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "14238:3:1",
									"type": ""
								}
							],
							"src": "14078:400:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14822:469:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "14833:155:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14984:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14840:142:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "14840:148:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "14833:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "14998:102:1",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "15087:6:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15096:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15005:81:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "15005:95:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "14998:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "15110:155:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15261:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15117:142:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "15117:148:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "15110:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "15275:10:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "15282:3:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "15275:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_t_string_memory_ptr_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "14801:3:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "14807:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "14818:3:1",
									"type": ""
								}
							],
							"src": "14484:807:1"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "15633:467:1",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "15644:155:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15795:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15651:142:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "15651:148:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "15644:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "15809:100:1",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "15896:6:1"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "15905:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15816:79:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "15816:93:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "15809:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "15919:155:1",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "16070:3:1"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulIdentifier",
												"src": "15926:142:1"
											},
											"nodeType": "YulFunctionCall",
											"src": "15926:148:1"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "15919:3:1"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "16084:10:1",
										"value": {
											"name": "pos",
											"nodeType": "YulIdentifier",
											"src": "16091:3:1"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "16084:3:1"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_t_bytes_memory_ptr_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f__to_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "15612:3:1",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "15618:6:1",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "15629:3:1",
									"type": ""
								}
							],
							"src": "15297:803:1"
						}
					]
				},
				"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Please login first.\")\n\n    }\n\n    function abi_encode_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_227680e893c060091d02ede1a72ac0b4c6374a12b8dfba8254bc78a6a30edde5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750(memPtr) {\n\n        mstore(add(memPtr, 0), \"Xy~01k!*\")\n\n    }\n\n    function abi_encode_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 8)\n        store_literal_in_memory_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750(pos)\n        end := add(pos, 8)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_82a795f7894f7634f990f9958fbc38711636879bf4711c10a2557b5255eee750_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Incorrect password.\")\n\n    }\n\n    function abi_encode_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_89fef2bba073fb3ed8db3ff0df3edbb533c6398941b52ab008c786fe1ef5ee7c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr) {\n\n        mstore(add(memPtr, 0), \".\")\n\n    }\n\n    function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)\n        store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)\n        end := add(pos, 1)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba(memPtr) {\n\n        mstore(add(memPtr, 0), \"0 BTC\")\n\n    }\n\n    function abi_encode_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 5)\n        store_literal_in_memory_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba(pos)\n        end := add(pos, 5)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba__to_t_bytes_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_stringliteral_8386b620353e545d5479df89d06df227008fa7ad32ab0141337ecff6d9eae7ba_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88(memPtr) {\n\n        mstore(add(memPtr, 0), \"$\")\n\n    }\n\n    function abi_encode_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)\n        store_literal_in_memory_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88(pos)\n        end := add(pos, 1)\n    }\n\n    function store_literal_in_memory_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f(memPtr) {\n\n        mstore(add(memPtr, 0), \".00\")\n\n    }\n\n    function abi_encode_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 3)\n        store_literal_in_memory_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f(pos)\n        end := add(pos, 3)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_t_string_memory_ptr_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_t_bytes_memory_ptr_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f__to_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_70247eb9c598f2f4187beaa721741c5633d49e1e8e37ea56263cfcf610c6c10f_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n}\n",
				"id": 1,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x117803E3 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x1D831D5C EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x2782CC7F EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x2C618954 EQ PUSH2 0xAB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0x1A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x84 SWAP2 SWAP1 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x209 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x951 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xABC JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x118 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F SWAP1 PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x125 SWAP1 PUSH2 0xBA0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x151 SWAP1 PUSH2 0xBA0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x173 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x181 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F0 SWAP1 PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x204 PUSH1 0x1 SLOAD PUSH2 0x33E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x25A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x251 SWAP1 PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6989 SWAP1 POP PUSH1 0x0 PUSH4 0x5F5E100 DUP3 PUSH1 0x1 SLOAD PUSH2 0x276 SWAP2 SWAP1 PUSH2 0xC0A JUMP JUMPDEST PUSH2 0x280 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP1 POP PUSH2 0x28B DUP2 PUSH2 0x557 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A2 SWAP1 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x31F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x316 SWAP1 PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH4 0x5F5E100 DUP4 PUSH2 0x352 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH4 0x5F5E100 DUP5 PUSH2 0x366 SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x373 DUP4 PUSH2 0x761 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP3 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST DUP3 PUSH2 0x39A SWAP2 SWAP1 PUSH2 0xE13 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B3 JUMPI PUSH2 0x3B2 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 PUSH1 0x3 DUP3 DUP7 PUSH2 0x404 SWAP2 SWAP1 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x40E SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x41C JUMPI POP PUSH1 0x0 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x491 JUMPI PUSH32 0x2C00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 DUP1 PUSH2 0x44E SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4A4 JUMPI PUSH2 0x4A3 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP1 PUSH2 0x4BB SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x4CE JUMPI PUSH2 0x4CD PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH2 0x508 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3EC JUMP JUMPDEST POP DUP2 PUSH2 0x529 PUSH3 0xF4240 DUP9 PUSH2 0x524 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST PUSH2 0x761 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53A SWAP3 SWAP2 SWAP1 PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP8 POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x564 DUP4 PUSH2 0x761 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x6 DUP2 GT PUSH2 0x5A3 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x58A SWAP2 SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP POP POP POP PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 PUSH2 0x5B2 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST DUP3 PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0xE13 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5D6 JUMPI PUSH2 0x5D5 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x608 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x733 JUMPI PUSH1 0x0 PUSH1 0x3 DUP3 DUP7 PUSH2 0x627 SWAP2 SWAP1 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x631 SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x63F JUMPI POP PUSH1 0x0 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6B4 JUMPI PUSH32 0x2C00000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 DUP1 PUSH2 0x671 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x684 JUMPI PUSH2 0x683 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6C7 JUMPI PUSH2 0x6C6 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP1 PUSH2 0x6DE SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP5 POP DUP2 MLOAD DUP2 LT PUSH2 0x6F1 JUMPI PUSH2 0x6F0 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH2 0x72B SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x60F JUMP JUMPDEST POP DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x745 SWAP2 SWAP1 PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP6 POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0x7A8 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x7DA JUMPI DUP1 DUP1 PUSH2 0x7C3 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x7D3 SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7F6 JUMPI PUSH2 0x7F5 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x828 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x8B5 JUMPI PUSH1 0x1 DUP3 PUSH2 0x841 SWAP2 SWAP1 PUSH2 0xE47 JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x850 SWAP2 SWAP1 PUSH2 0xDE2 JUMP JUMPDEST PUSH1 0x30 PUSH2 0x85C SWAP2 SWAP1 PUSH2 0xE13 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x872 JUMPI PUSH2 0x871 PUSH2 0xEC3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x8AE SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST SWAP5 POP PUSH2 0x82C JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8FB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x8E0 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x923 DUP3 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x92D DUP2 DUP6 PUSH2 0x8CC JUMP JUMPDEST SWAP4 POP PUSH2 0x93D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x946 DUP2 PUSH2 0x907 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x96B DUP2 DUP5 PUSH2 0x918 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x9C9 DUP3 PUSH2 0x907 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x9E8 JUMPI PUSH2 0x9E7 PUSH2 0x991 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9FB PUSH2 0x973 JUMP JUMPDEST SWAP1 POP PUSH2 0xA07 DUP3 DUP3 PUSH2 0x9C0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xA27 JUMPI PUSH2 0xA26 PUSH2 0x991 JUMP JUMPDEST JUMPDEST PUSH2 0xA30 DUP3 PUSH2 0x907 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5F PUSH2 0xA5A DUP5 PUSH2 0xA0C JUMP JUMPDEST PUSH2 0x9F1 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xA7B JUMPI PUSH2 0xA7A PUSH2 0x98C JUMP JUMPDEST JUMPDEST PUSH2 0xA86 DUP5 DUP3 DUP6 PUSH2 0xA3D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA3 JUMPI PUSH2 0xAA2 PUSH2 0x987 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAB3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA4C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAD2 JUMPI PUSH2 0xAD1 PUSH2 0x97D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAF0 JUMPI PUSH2 0xAEF PUSH2 0x982 JUMP JUMPDEST JUMPDEST PUSH2 0xAFC DUP5 DUP3 DUP6 ADD PUSH2 0xA8E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x506C65617365206C6F67696E2066697273742E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3B PUSH1 0x13 DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP2 POP PUSH2 0xB46 DUP3 PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB6A DUP2 PUSH2 0xB2E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xBB8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xBCB JUMPI PUSH2 0xBCA PUSH2 0xB71 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC15 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xC20 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC2E DUP2 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xC45 JUMPI PUSH2 0xC44 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC86 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xC91 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xCA1 JUMPI PUSH2 0xCA0 PUSH2 0xC4C JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x58797E30316B212A000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCED PUSH1 0x8 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0xCF8 DUP3 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0E DUP3 PUSH2 0xCE0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD39 DUP3 PUSH2 0xD18 JUMP JUMPDEST PUSH2 0xD43 DUP2 DUP6 PUSH2 0xD23 JUMP JUMPDEST SWAP4 POP PUSH2 0xD53 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x8DD JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6B DUP3 DUP5 PUSH2 0xD2E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E636F72726563742070617373776F72642E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDAC PUSH1 0x13 DUP4 PUSH2 0x8CC JUMP JUMPDEST SWAP2 POP PUSH2 0xDB7 DUP3 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDDB DUP2 PUSH2 0xD9F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDED DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xDF8 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xE08 JUMPI PUSH2 0xE07 PUSH2 0xC4C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE1E DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE29 DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE41 JUMPI PUSH2 0xE40 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE52 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE5D DUP4 PUSH2 0xBD1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE75 JUMPI PUSH2 0xE74 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE86 DUP3 PUSH2 0xBD1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xEB8 JUMPI PUSH2 0xEB7 PUSH2 0xBDB JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x2E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF28 PUSH1 0x1 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0xF33 DUP3 PUSH2 0xEF2 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF49 DUP3 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0xF53 DUP2 DUP6 PUSH2 0xCAC JUMP JUMPDEST SWAP4 POP PUSH2 0xF63 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x8DD JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x3020425443000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA5 PUSH1 0x5 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0xFB0 DUP3 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0x5 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC7 DUP3 DUP6 PUSH2 0xD2E JUMP JUMPDEST SWAP2 POP PUSH2 0xFD2 DUP3 PUSH2 0xF1B JUMP JUMPDEST SWAP2 POP PUSH2 0xFDE DUP3 DUP5 PUSH2 0xF3E JUMP JUMPDEST SWAP2 POP PUSH2 0xFE9 DUP3 PUSH2 0xF98 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x2400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x102B PUSH1 0x1 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0x1036 DUP3 PUSH2 0xFF5 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2E30300000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1077 PUSH1 0x3 DUP4 PUSH2 0xCAC JUMP JUMPDEST SWAP2 POP PUSH2 0x1082 DUP3 PUSH2 0x1041 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1098 DUP3 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x10A4 DUP3 DUP5 PUSH2 0xF3E JUMP JUMPDEST SWAP2 POP PUSH2 0x10AF DUP3 PUSH2 0x106A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C5 DUP3 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x10D1 DUP3 DUP5 PUSH2 0xD2E JUMP JUMPDEST SWAP2 POP PUSH2 0x10DC DUP3 PUSH2 0x106A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 INVALID DELEGATECALL 0xC2 PREVRANDAO COINBASE SWAP2 CODECOPY 0x4C MLOAD CALLDATACOPY 0xD4 0xD5 0xED 0x4C AND PUSH5 0xCBB8D15EB6 JUMP CALLDATASIZE CALLVALUE 0x2C 0x5E SELFDESTRUCT EXTCODESIZE 0xBA 0x4C SWAP14 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
		"sourceMap": "60:3034:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;875:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;980:113;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;646:221;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;522:114;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;875:97;926:13;462:8;;;;;;;;;;;454:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;959:5:::1;952:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;875:97:::0;:::o;980:113::-;1032:13;462:8;;;;;;;;;;;454:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:20:::1;1075:9;;1065;:20::i;:::-;1058:27;;980:113:::0;:::o;646:221::-;702:13;462:8;;;;;;;;;;;454:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;728:20:::1;751:5;728:28;;767:17;815:5;799:12;787:9;;:24;;;;:::i;:::-;:34;;;;:::i;:::-;767:54;;839:20;849:9;839;:20::i;:::-;832:27;;;;646:221:::0;:::o;522:114::-;592:8;2518:28;;;;;;;:::i;:::-;;;;;;;;;;;;;2508:39;;;;;;339:8;316:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;306:44;;;;;;:61;298:93;;;;;;;;;;;;:::i;:::-;;;;;;;;;624:4:::1;613:8;;:15;;;;;;;;;;;;;;;;;;522:114:::0;;:::o;1791:667::-;1848:13;1870:19;1902:5;1892:6;:16;;;;:::i;:::-;1870:38;;1915:19;1947:5;1937:6;:16;;;;:::i;:::-;1915:38;;1960:28;1991:25;2004:11;1991:12;:25::i;:::-;1960:56;;2023:21;2053:14;2023:45;;2075:11;2089:8;:15;2075:29;;2111:19;2155:1;2149:3;:7;;;;:::i;:::-;2143:3;:13;;;;:::i;:::-;2133:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2111:46;;2164:9;2189;2184:174;2208:3;2204:1;:7;2184:174;;;2250:1;2245;2240;2234:3;:7;;;;:::i;:::-;2233:13;;;;:::i;:::-;:18;:28;;;;;2260:1;2255;:6;;2233:28;2229:86;;;2292:11;2278:6;2285:3;;;;;:::i;:::-;;;2278:11;;;;;;;;:::i;:::-;;;;;:25;;;;;;;;;;;2229:86;2339:8;2348:1;2339:11;;;;;;;;:::i;:::-;;;;;;;;;;2325:6;2332:3;;;;;:::i;:::-;;;2325:11;;;;;;;;:::i;:::-;;;;;:25;;;;;;;;;;;2213:3;;;;;:::i;:::-;;;;2184:174;;;;2395:6;2408:35;2436:5;2421:11;:21;;;;:::i;:::-;2408:12;:35::i;:::-;2378:75;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2364:90;;;;;;;;;1791:667;;;:::o;1101:680::-;1158:13;1184:23;1210:20;1223:6;1210:12;:20::i;:::-;1184:46;;1241:21;1271:9;1241:40;;1292:11;1306:8;:15;1292:29;;1343:1;1336:3;:8;1332:95;;1397:9;1375:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;1361:54;;;;;;;1332:95;1437:19;1481:1;1475:3;:7;;;;:::i;:::-;1469:3;:13;;;;:::i;:::-;1459:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1437:46;;1494:9;1523;1518:194;1542:3;1538:1;:7;1518:194;;;1588:1;1583;1578;1572:3;:7;;;;:::i;:::-;1571:13;;;;:::i;:::-;:18;:28;;;;;1598:1;1593;:6;;1571:28;1567:94;;;1634:11;1620:6;1627:3;;;;;:::i;:::-;;;1620:11;;;;;;;;:::i;:::-;;;;;:25;;;;;;;;;;;1567:94;1689:8;1698:1;1689:11;;;;;;;;:::i;:::-;;;;;;;;;;1675:6;1682:3;;;;;:::i;:::-;;;1675:11;;;;;;;;:::i;:::-;;;;;:25;;;;;;;;;;;1547:3;;;;;:::i;:::-;;;;1518:194;;;;1758:6;1736:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;1722:51;;;;;;;1101:680;;;;:::o;2556:535::-;2615:13;2654:1;2645:5;:10;2641:53;;2672:10;;;;;;;;;;;;;;;;;;;;;2641:53;2704:12;2719:5;2704:20;;2735:14;2760:78;2775:1;2767:4;:9;2760:78;;2793:8;;;;;:::i;:::-;;;;2824:2;2816:10;;;;;:::i;:::-;;;2760:78;;;2848:19;2880:6;2870:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2848:39;;2898:154;2914:1;2905:5;:10;2898:154;;2942:1;2932:11;;;;;:::i;:::-;;;3009:2;3001:5;:10;;;;:::i;:::-;2988:2;:24;;;;:::i;:::-;2975:39;;2958:6;2965;2958:14;;;;;;;;:::i;:::-;;;;;:56;;;;;;;;;;;3038:2;3029:11;;;;;:::i;:::-;;;2898:154;;;3076:6;3062:21;;;;;2556:535;;;;:::o;7:99:1:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1349:75::-;1382:6;1415:2;1409:9;1399:19;;1349:75;:::o;1430:117::-;1539:1;1536;1529:12;1553:117;1662:1;1659;1652:12;1676:117;1785:1;1782;1775:12;1799:117;1908:1;1905;1898:12;1922:180;1970:77;1967:1;1960:88;2067:4;2064:1;2057:15;2091:4;2088:1;2081:15;2108:281;2191:27;2213:4;2191:27;:::i;:::-;2183:6;2179:40;2321:6;2309:10;2306:22;2285:18;2273:10;2270:34;2267:62;2264:88;;;2332:18;;:::i;:::-;2264:88;2372:10;2368:2;2361:22;2151:238;2108:281;;:::o;2395:129::-;2429:6;2456:20;;:::i;:::-;2446:30;;2485:33;2513:4;2505:6;2485:33;:::i;:::-;2395:129;;;:::o;2530:308::-;2592:4;2682:18;2674:6;2671:30;2668:56;;;2704:18;;:::i;:::-;2668:56;2742:29;2764:6;2742:29;:::i;:::-;2734:37;;2826:4;2820;2816:15;2808:23;;2530:308;;;:::o;2844:146::-;2941:6;2936:3;2931;2918:30;2982:1;2973:6;2968:3;2964:16;2957:27;2844:146;;;:::o;2996:425::-;3074:5;3099:66;3115:49;3157:6;3115:49;:::i;:::-;3099:66;:::i;:::-;3090:75;;3188:6;3181:5;3174:21;3226:4;3219:5;3215:16;3264:3;3255:6;3250:3;3246:16;3243:25;3240:112;;;3271:79;;:::i;:::-;3240:112;3361:54;3408:6;3403:3;3398;3361:54;:::i;:::-;3080:341;2996:425;;;;;:::o;3441:340::-;3497:5;3546:3;3539:4;3531:6;3527:17;3523:27;3513:122;;3554:79;;:::i;:::-;3513:122;3671:6;3658:20;3696:79;3771:3;3763:6;3756:4;3748:6;3744:17;3696:79;:::i;:::-;3687:88;;3503:278;3441:340;;;;:::o;3787:509::-;3856:6;3905:2;3893:9;3884:7;3880:23;3876:32;3873:119;;;3911:79;;:::i;:::-;3873:119;4059:1;4048:9;4044:17;4031:31;4089:18;4081:6;4078:30;4075:117;;;4111:79;;:::i;:::-;4075:117;4216:63;4271:7;4262:6;4251:9;4247:22;4216:63;:::i;:::-;4206:73;;4002:287;3787:509;;;;:::o;4302:169::-;4442:21;4438:1;4430:6;4426:14;4419:45;4302:169;:::o;4477:366::-;4619:3;4640:67;4704:2;4699:3;4640:67;:::i;:::-;4633:74;;4716:93;4805:3;4716:93;:::i;:::-;4834:2;4829:3;4825:12;4818:19;;4477:366;;;:::o;4849:419::-;5015:4;5053:2;5042:9;5038:18;5030:26;;5102:9;5096:4;5092:20;5088:1;5077:9;5073:17;5066:47;5130:131;5256:4;5130:131;:::i;:::-;5122:139;;4849:419;;;:::o;5274:180::-;5322:77;5319:1;5312:88;5419:4;5416:1;5409:15;5443:4;5440:1;5433:15;5460:320;5504:6;5541:1;5535:4;5531:12;5521:22;;5588:1;5582:4;5578:12;5609:18;5599:81;;5665:4;5657:6;5653:17;5643:27;;5599:81;5727:2;5719:6;5716:14;5696:18;5693:38;5690:84;;5746:18;;:::i;:::-;5690:84;5511:269;5460:320;;;:::o;5786:77::-;5823:7;5852:5;5841:16;;5786:77;;;:::o;5869:180::-;5917:77;5914:1;5907:88;6014:4;6011:1;6004:15;6038:4;6035:1;6028:15;6055:410;6095:7;6118:20;6136:1;6118:20;:::i;:::-;6113:25;;6152:20;6170:1;6152:20;:::i;:::-;6147:25;;6207:1;6204;6200:9;6229:30;6247:11;6229:30;:::i;:::-;6218:41;;6408:1;6399:7;6395:15;6392:1;6389:22;6369:1;6362:9;6342:83;6319:139;;6438:18;;:::i;:::-;6319:139;6103:362;6055:410;;;;:::o;6471:180::-;6519:77;6516:1;6509:88;6616:4;6613:1;6606:15;6640:4;6637:1;6630:15;6657:185;6697:1;6714:20;6732:1;6714:20;:::i;:::-;6709:25;;6748:20;6766:1;6748:20;:::i;:::-;6743:25;;6787:1;6777:35;;6792:18;;:::i;:::-;6777:35;6834:1;6831;6827:9;6822:14;;6657:185;;;;:::o;6848:148::-;6950:11;6987:3;6972:18;;6848:148;;;;:::o;7002:158::-;7142:10;7138:1;7130:6;7126:14;7119:34;7002:158;:::o;7166:400::-;7326:3;7347:84;7429:1;7424:3;7347:84;:::i;:::-;7340:91;;7440:93;7529:3;7440:93;:::i;:::-;7558:1;7553:3;7549:11;7542:18;;7166:400;;;:::o;7572:381::-;7757:3;7779:148;7923:3;7779:148;:::i;:::-;7772:155;;7944:3;7937:10;;7572:381;;;:::o;7959:98::-;8010:6;8044:5;8038:12;8028:22;;7959:98;;;:::o;8063:147::-;8164:11;8201:3;8186:18;;8063:147;;;;:::o;8216:386::-;8320:3;8348:38;8380:5;8348:38;:::i;:::-;8402:88;8483:6;8478:3;8402:88;:::i;:::-;8395:95;;8499:65;8557:6;8552:3;8545:4;8538:5;8534:16;8499:65;:::i;:::-;8589:6;8584:3;8580:16;8573:23;;8324:278;8216:386;;;;:::o;8608:271::-;8738:3;8760:93;8849:3;8840:6;8760:93;:::i;:::-;8753:100;;8870:3;8863:10;;8608:271;;;;:::o;8885:169::-;9025:21;9021:1;9013:6;9009:14;9002:45;8885:169;:::o;9060:366::-;9202:3;9223:67;9287:2;9282:3;9223:67;:::i;:::-;9216:74;;9299:93;9388:3;9299:93;:::i;:::-;9417:2;9412:3;9408:12;9401:19;;9060:366;;;:::o;9432:419::-;9598:4;9636:2;9625:9;9621:18;9613:26;;9685:9;9679:4;9675:20;9671:1;9660:9;9656:17;9649:47;9713:131;9839:4;9713:131;:::i;:::-;9705:139;;9432:419;;;:::o;9857:176::-;9889:1;9906:20;9924:1;9906:20;:::i;:::-;9901:25;;9940:20;9958:1;9940:20;:::i;:::-;9935:25;;9979:1;9969:35;;9984:18;;:::i;:::-;9969:35;10025:1;10022;10018:9;10013:14;;9857:176;;;;:::o;10039:191::-;10079:3;10098:20;10116:1;10098:20;:::i;:::-;10093:25;;10132:20;10150:1;10132:20;:::i;:::-;10127:25;;10175:1;10172;10168:9;10161:16;;10196:3;10193:1;10190:10;10187:36;;;10203:18;;:::i;:::-;10187:36;10039:191;;;;:::o;10236:194::-;10276:4;10296:20;10314:1;10296:20;:::i;:::-;10291:25;;10330:20;10348:1;10330:20;:::i;:::-;10325:25;;10374:1;10371;10367:9;10359:17;;10398:1;10392:4;10389:11;10386:37;;;10403:18;;:::i;:::-;10386:37;10236:194;;;;:::o;10436:233::-;10475:3;10498:24;10516:5;10498:24;:::i;:::-;10489:33;;10544:66;10537:5;10534:77;10531:103;;10614:18;;:::i;:::-;10531:103;10661:1;10654:5;10650:13;10643:20;;10436:233;;;:::o;10675:180::-;10723:77;10720:1;10713:88;10820:4;10817:1;10810:15;10844:4;10841:1;10834:15;10861:151;11001:3;10997:1;10989:6;10985:14;10978:27;10861:151;:::o;11018:400::-;11178:3;11199:84;11281:1;11276:3;11199:84;:::i;:::-;11192:91;;11292:93;11381:3;11292:93;:::i;:::-;11410:1;11405:3;11401:11;11394:18;;11018:400;;;:::o;11424:390::-;11530:3;11558:39;11591:5;11558:39;:::i;:::-;11613:89;11695:6;11690:3;11613:89;:::i;:::-;11606:96;;11711:65;11769:6;11764:3;11757:4;11750:5;11746:16;11711:65;:::i;:::-;11801:6;11796:3;11792:16;11785:23;;11534:280;11424:390;;;;:::o;11820:155::-;11960:7;11956:1;11948:6;11944:14;11937:31;11820:155;:::o;11981:400::-;12141:3;12162:84;12244:1;12239:3;12162:84;:::i;:::-;12155:91;;12255:93;12344:3;12255:93;:::i;:::-;12373:1;12368:3;12364:11;12357:18;;11981:400;;;:::o;12387:963::-;12767:3;12789:93;12878:3;12869:6;12789:93;:::i;:::-;12782:100;;12899:148;13043:3;12899:148;:::i;:::-;12892:155;;13064:95;13155:3;13146:6;13064:95;:::i;:::-;13057:102;;13176:148;13320:3;13176:148;:::i;:::-;13169:155;;13341:3;13334:10;;12387:963;;;;;:::o;13356:151::-;13496:3;13492:1;13484:6;13480:14;13473:27;13356:151;:::o;13513:400::-;13673:3;13694:84;13776:1;13771:3;13694:84;:::i;:::-;13687:91;;13787:93;13876:3;13787:93;:::i;:::-;13905:1;13900:3;13896:11;13889:18;;13513:400;;;:::o;13919:153::-;14059:5;14055:1;14047:6;14043:14;14036:29;13919:153;:::o;14078:400::-;14238:3;14259:84;14341:1;14336:3;14259:84;:::i;:::-;14252:91;;14352:93;14441:3;14352:93;:::i;:::-;14470:1;14465:3;14461:11;14454:18;;14078:400;;;:::o;14484:807::-;14818:3;14840:148;14984:3;14840:148;:::i;:::-;14833:155;;15005:95;15096:3;15087:6;15005:95;:::i;:::-;14998:102;;15117:148;15261:3;15117:148;:::i;:::-;15110:155;;15282:3;15275:10;;14484:807;;;;:::o;15297:803::-;15629:3;15651:148;15795:3;15651:148;:::i;:::-;15644:155;;15816:93;15905:3;15896:6;15816:93;:::i;:::-;15809:100;;15926:148;16070:3;15926:148;:::i;:::-;15919:155;;16091:3;16084:10;;15297:803;;;;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH 40\t\t\tcontract HARDWARE {\\r\\n    str...\n  MSTORE \t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH 40\t\t\tstring private owner = \"Ledger...\n  MLOAD \t\t\tstring private owner = \"Ledger...\n  DUP1 \t\t\tstring private owner = \"Ledger...\n  PUSH 60\t\t\tstring private owner = \"Ledger...\n  ADD \t\t\tstring private owner = \"Ledger...\n  PUSH 40\t\t\tstring private owner = \"Ledger...\n  MSTORE \t\t\tstring private owner = \"Ledger...\n  DUP1 \t\t\tstring private owner = \"Ledger...\n  PUSH 23\t\t\tstring private owner = \"Ledger...\n  DUP2 \t\t\tstring private owner = \"Ledger...\n  MSTORE \t\t\tstring private owner = \"Ledger...\n  PUSH 20\t\t\tstring private owner = \"Ledger...\n  ADD \t\t\tstring private owner = \"Ledger...\n  PUSH data AAFAED2B39B823BF94636B2D15E213CC715F9DB176507D7232FFD32B6622025D\t\t\tstring private owner = \"Ledger...\n  PUSH 23\t\t\tstring private owner = \"Ledger...\n  SWAP2 \t\t\tstring private owner = \"Ledger...\n  CODECOPY \t\t\tstring private owner = \"Ledger...\n  PUSH 0\t\t\tstring private owner = \"Ledger...\n  SWAP1 \t\t\tstring private owner = \"Ledger...\n  DUP2 \t\t\tstring private owner = \"Ledger...\n  PUSH [tag] 1\t\t\tstring private owner = \"Ledger...\n  SWAP2 \t\t\tstring private owner = \"Ledger...\n  SWAP1 \t\t\tstring private owner = \"Ledger...\n  PUSH [tag] 2\t\t\tstring private owner = \"Ledger...\n  JUMP \t\t\tstring private owner = \"Ledger...\ntag 1\t\t\tstring private owner = \"Ledger...\n  JUMPDEST \t\t\tstring private owner = \"Ledger...\n  POP \t\t\tstring private owner = \"Ledger...\n  PUSH 4E25ED2E700\t\t\t53703 * 10**8\n  PUSH 1\t\t\tuint256 private btcAmount = 53...\n  SSTORE \t\t\tuint256 private btcAmount = 53...\n  PUSH 0\t\t\tfalse\n  PUSH 2\t\t\tbool private loggedIn = false\n  PUSH 0\t\t\tbool private loggedIn = false\n  PUSH 100\t\t\tbool private loggedIn = false\n  EXP \t\t\tbool private loggedIn = false\n  DUP2 \t\t\tbool private loggedIn = false\n  SLOAD \t\t\tbool private loggedIn = false\n  DUP2 \t\t\tbool private loggedIn = false\n  PUSH FF\t\t\tbool private loggedIn = false\n  MUL \t\t\tbool private loggedIn = false\n  NOT \t\t\tbool private loggedIn = false\n  AND \t\t\tbool private loggedIn = false\n  SWAP1 \t\t\tbool private loggedIn = false\n  DUP4 \t\t\tbool private loggedIn = false\n  ISZERO \t\t\tbool private loggedIn = false\n  ISZERO \t\t\tbool private loggedIn = false\n  MUL \t\t\tbool private loggedIn = false\n  OR \t\t\tbool private loggedIn = false\n  SWAP1 \t\t\tbool private loggedIn = false\n  SSTORE \t\t\tbool private loggedIn = false\n  POP \t\t\tbool private loggedIn = false\n  CALLVALUE \t\t\tcontract HARDWARE {\\r\\n    str...\n  DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n  ISZERO \t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH [tag] 3\t\t\tcontract HARDWARE {\\r\\n    str...\n  JUMPI \t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH 0\t\t\tcontract HARDWARE {\\r\\n    str...\n  DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n  REVERT \t\t\tcontract HARDWARE {\\r\\n    str...\ntag 3\t\t\tcontract HARDWARE {\\r\\n    str...\n  JUMPDEST \t\t\tcontract HARDWARE {\\r\\n    str...\n  POP \t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH [tag] 4\t\t\tcontract HARDWARE {\\r\\n    str...\n  JUMP \t\t\tcontract HARDWARE {\\r\\n    str...\ntag 5\t\t\t-License-Identifier: MIT\\r\\npr...\n  JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n  PUSH 0\t\t\t\\ncontr\n  DUP2 \t\t\trivat\n  MLOAD \t\t\tring private\n  SWAP1 \t\t\t {\\r\\n    string private\n  POP \t\t\t {\\r\\n    string private\n  SWAP2 \t\t\t-License-Identifier: MIT\\r\\npr...\n  SWAP1 \t\t\t-License-Identifier: MIT\\r\\npr...\n  POP \t\t\t-License-Identifier: MIT\\r\\npr...\n  JUMP \t\t\t-License-Identifier: MIT\\r\\npr...\ntag 6\t\t\tger-Nano-X (Recognized HARDWAR...\n  JUMPDEST \t\t\tger-Nano-X (Recognized HARDWAR...\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tprivate btcAmount = 53703 * 10...\n  PUSH 0\t\t\t5\n  MSTORE \t\t\t  uint256 private btcAmount = ...\n  PUSH 41\t\t\tswor\n  PUSH 4\t\t\tP\n  MSTORE \t\t\trequirePassword\n  PUSH 24\t\t\tword\n  PUSH 0\t\t\ta\n  REVERT \t\t\temory password)\ntag 7\t\t\trequire(keccak256(abi.encodePa...\n  JUMPDEST \t\t\trequire(keccak256(abi.encodePa...\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\td))) == PASSWORD_HASH, \"Incorr...\n  PUSH 0\t\t\tw\n  MSTORE \t\t\tes(password))) == PASSWORD_HAS...\n  PUSH 22\t\t\t{\\r\\n \n  PUSH 4\t\t\t(\n  MSTORE \t\t\treLogin() {\\r\\n  \n  PUSH 24\t\t\tdIn,\n  PUSH 0\t\t\tg\n  REVERT \t\t\tuire(loggedIn, \ntag 8\t\t\tn first.\");\\r\\n        _;\\r\\n ...\n  JUMPDEST \t\t\tn first.\");\\r\\n        _;\\r\\n ...\n  PUSH 0\t\t\ton AUT\n  PUSH 2\t\t\tr\n  DUP3 \t\t\tpass\n  DIV \t\t\tory password\n  SWAP1 \t\t\tstring memory password\n  POP \t\t\tstring memory password\n  PUSH 1\t\t\t \n  DUP3 \t\t\t    \n  AND \t\t\t{\\r\\n        l\n  DUP1 \t\t\t  }\\r\\n\\r\\n\\r\\n    funct\n  PUSH [tag] 30\t\t\t true;\\r\\n    }\\r\\n\\r\\n\\r\\n   ...\n  JUMPI \t\t\t true;\\r\\n    }\\r\\n\\r\\n\\r\\n   ...\n  PUSH 7F\t\t\tgin \n  DUP3 \t\t\tequire\n  AND \t\t\tew requireLogin r\n  SWAP2 \t\t\t public view requireLogin r\n  POP \t\t\t public view requireLogin r\ntag 30\t\t\t true;\\r\\n    }\\r\\n\\r\\n\\r\\n   ...\n  JUMPDEST \t\t\t true;\\r\\n    }\\r\\n\\r\\n\\r\\n   ...\n  PUSH 20\t\t\t27\n  DUP3 \t\t\tdRate \n  LT \t\t\toUsdRate = 270\n  DUP2 \t\t\t        uint256 bt\n  SUB \t\t\t{\\r\\n        uint256 btcToUsdR...\n  PUSH [tag] 31\t\t\ty) {\\r\\n        uint256 btcToU...\n  JUMPI \t\t\ty) {\\r\\n        uint256 btcToU...\n  PUSH [tag] 32\t\t\tt256 usdAmount = b\n  PUSH [tag] 7\t\t\tt256 usdAmount = b\n  JUMP \t\t\tt256 usdAmount = b\ntag 32\t\t\tt256 usdAmount = b\n  JUMPDEST \t\t\tt256 usdAmount = b\ntag 31\t\t\ty) {\\r\\n        uint256 btcToU...\n  JUMPDEST \t\t\ty) {\\r\\n        uint256 btcToU...\n  POP \t\t\tORIZATION(string memory passwo...\n  SWAP2 \t\t\tn first.\");\\r\\n        _;\\r\\n ...\n  SWAP1 \t\t\tn first.\");\\r\\n        _;\\r\\n ...\n  POP \t\t\tn first.\");\\r\\n        _;\\r\\n ...\n  JUMP \t\t\tn first.\");\\r\\n        _;\\r\\n ...\ntag 9\t\t\te / (10**8);\\r\\n        return...\n  JUMPDEST \t\t\te / (10**8);\\r\\n        return...\n  PUSH 0\t\t\t;\\r\\n \n  DUP2 \t\t\tn O\n  SWAP1 \t\t\t function O\n  POP \t\t\t function O\n  DUP2 \t\t\tequ\n  PUSH 0\t\t\tw\n  MSTORE \t\t\tlic view requi\n  PUSH 20\t\t\t) {\\r\n  PUSH 0\t\t\to\n  KECCAK256 \t\t\tstring memory) {\\r\\n\n  SWAP1 \t\t\teturns (string memory) {\\r\\n\n  POP \t\t\teturns (string memory) {\\r\\n\n  SWAP2 \t\t\te / (10**8);\\r\\n        return...\n  SWAP1 \t\t\te / (10**8);\\r\\n        return...\n  POP \t\t\te / (10**8);\\r\\n        return...\n  JUMP \t\t\te / (10**8);\\r\\n        return...\ntag 10\t\t\tn owner;\\r\\n    }\\r\\n\\r\\n    f...\n  JUMPDEST \t\t\tn owner;\\r\\n    }\\r\\n\\r\\n    f...\n  PUSH 0\t\t\tS() pu\n  PUSH 20\t\t\tmo\n  PUSH 1F\t\t\tng\n  DUP4 \t\t\ts (st\n  ADD \t\t\tturns (string \n  DIV \t\t\tn returns (string memor\n  SWAP1 \t\t\tequireLogin returns (string me...\n  POP \t\t\tequireLogin returns (string me...\n  SWAP2 \t\t\tn owner;\\r\\n    }\\r\\n\\r\\n    f...\n  SWAP1 \t\t\tn owner;\\r\\n    }\\r\\n\\r\\n    f...\n  POP \t\t\tn owner;\\r\\n    }\\r\\n\\r\\n    f...\n  JUMP \t\t\tn owner;\\r\\n    }\\r\\n\\r\\n    f...\ntag 11\t\t\t  return formatBTC(btcAmount);...\n  JUMPDEST \t\t\t  return formatBTC(btcAmount);...\n  PUSH 0\t\t\t functio\n  DUP3 \t\t\teturn\n  DUP3 \t\t\tpure\n  SHL \t\t\tate pure returns\n  SWAP1 \t\t\t(uint256 amount) private pure ...\n  POP \t\t\t(uint256 amount) private pure ...\n  SWAP3 \t\t\t  return formatBTC(btcAmount);...\n  SWAP2 \t\t\t  return formatBTC(btcAmount);...\n  POP \t\t\t  return formatBTC(btcAmount);...\n  POP \t\t\t  return formatBTC(btcAmount);...\n  JUMP \t\t\t  return formatBTC(btcAmount);...\ntag 12\t\t\try) {\\r\\n        string memory...\n  JUMPDEST \t\t\try) {\\r\\n        string memory...\n  PUSH 0\t\t\t   byt\n  PUSH 8\t\t\t \n  DUP4 \t\t\tount);\\r\\n  \n  MUL \t\t\ttrAmount);\\r\\n      \n  PUSH [tag] 37\t\t\ttes.length;\\r\\n        if (len...\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t= 6) {\\r\\n            return s...\n  DUP3 \t\t\t  if (len\n  PUSH [tag] 11\t\t\ttes.length;\\r\\n        if (len...\n  JUMP \t\t\ttes.length;\\r\\n        if (len...\ntag 37\t\t\ttes.length;\\r\\n        if (len...\n  JUMPDEST \t\t\ttes.length;\\r\\n        if (len...\n  PUSH [tag] 38\t\t\t        bytes memory result = ...\n  DUP7 \t\t\tnew byte\n  DUP4 \t\t\ty result \n  PUSH [tag] 11\t\t\t        bytes memory result = ...\n  JUMP \t\t\t        bytes memory result = ...\ntag 38\t\t\t        bytes memory result = ...\n  JUMPDEST \t\t\t        bytes memory result = ...\n  SWAP6 \t\t\t\\n        }\\r\\n        bytes m...\n  POP \t\t\t\\n        }\\r\\n        bytes m...\n  DUP1 \t\t\t j =\n  NOT \t\t\tt256 j = \n  DUP5 \t\t\t    u\n  AND \t\t\t        uint256 j = 0\n  SWAP4 \t\t\tn / 3);\\r\\n        uint256 j =...\n  POP \t\t\tn / 3);\\r\\n        uint256 j =...\n  DUP1 \t\t\t) {\\r\n  DUP7 \t\t\t< len; i\n  AND \t\t\t; i < len; i++) {\\r\\n\n  DUP5 \t\t\t6 i =\n  OR \t\t\tt256 i = 0; i < len; i++) {\\r\\...\n  SWAP3 \t\t\t  for (uint256 i = 0; i < len;...\n  POP \t\t\t  for (uint256 i = 0; i < len;...\n  POP \t\t\ts memory strBytes = bytes(strA...\n  POP \t\t\ts memory strBytes = bytes(strA...\n  SWAP4 \t\t\try) {\\r\\n        string memory...\n  SWAP3 \t\t\try) {\\r\\n        string memory...\n  POP \t\t\try) {\\r\\n        string memory...\n  POP \t\t\try) {\\r\\n        string memory...\n  POP \t\t\try) {\\r\\n        string memory...\n  JUMP \t\t\try) {\\r\\n        string memory...\ntag 13\t\t\tf ((len - i) % 3 == 0 && i != ...\n  JUMPDEST \t\t\tf ((len - i) % 3 == 0 && i != ...\n  PUSH 0\t\t\t       \n  DUP2 \t\t\tbytes\n  SWAP1 \t\t\tult[j++] = bytes\n  POP \t\t\tult[j++] = bytes\n  SWAP2 \t\t\tf ((len - i) % 3 == 0 && i != ...\n  SWAP1 \t\t\tf ((len - i) % 3 == 0 && i != ...\n  POP \t\t\tf ((len - i) % 3 == 0 && i != ...\n  JUMP \t\t\tf ((len - i) % 3 == 0 && i != ...\ntag 14\t\t\t         }\\r\\n            resu...\n  JUMPDEST \t\t\t         }\\r\\n            resu...\n  PUSH 0\t\t\tlt[\n  DUP2 \t\t\t;\\r\\n  \n  SWAP1 \t\t\tytes[i];\\r\\n  \n  POP \t\t\tytes[i];\\r\\n  \n  SWAP2 \t\t\t         }\\r\\n            resu...\n  SWAP1 \t\t\t         }\\r\\n            resu...\n  POP \t\t\t         }\\r\\n            resu...\n  JUMP \t\t\t         }\\r\\n            resu...\ntag 15\t\t\t     return string(abi.encodeP...\n  JUMPDEST \t\t\t     return string(abi.encodeP...\n  PUSH 0\t\t\t.00\"));\\r\\n\n  PUSH [tag] 42\t\t\tformatBTC(uint256 amount) priv...\n  PUSH [tag] 43\t\t\tamount) private pure returns (...\n  PUSH [tag] 44\t\t\trivate pure returns (str\n  DUP5 \t\t\ts (st\n  PUSH [tag] 13\t\t\trivate pure returns (str\n  JUMP \t\t\trivate pure returns (str\ntag 44\t\t\trivate pure returns (str\n  JUMPDEST \t\t\trivate pure returns (str\n  PUSH [tag] 14\t\t\tamount) private pure returns (...\n  JUMP \t\t\tamount) private pure returns (...\ntag 43\t\t\tamount) private pure returns (...\n  JUMPDEST \t\t\tamount) private pure returns (...\n  PUSH [tag] 13\t\t\tformatBTC(uint256 amount) priv...\n  JUMP \t\t\tformatBTC(uint256 amount) priv...\ntag 42\t\t\tformatBTC(uint256 amount) priv...\n  JUMPDEST \t\t\tformatBTC(uint256 amount) priv...\n  SWAP1 \t\t\t\\r\\n\\r\\nfunction formatBTC(uin...\n  POP \t\t\t\\r\\n\\r\\nfunction formatBTC(uin...\n  SWAP2 \t\t\t     return string(abi.encodeP...\n  SWAP1 \t\t\t     return string(abi.encodeP...\n  POP \t\t\t     return string(abi.encodeP...\n  JUMP \t\t\t     return string(abi.encodeP...\ntag 16\t\t\t\\n    uint256 integerPart = am...\n  JUMPDEST \t\t\t\\n    uint256 integerPart = am...\n  PUSH 0\t\t\t;\\r\\n\n  DUP2 \t\t\tlPart\n  SWAP1 \t\t\t decimalPart\n  POP \t\t\t decimalPart\n  SWAP2 \t\t\t\\n    uint256 integerPart = am...\n  SWAP1 \t\t\t\\n    uint256 integerPart = am...\n  POP \t\t\t\\n    uint256 integerPart = am...\n  JUMP \t\t\t\\n    uint256 integerPart = am...\ntag 17\t\t\t(10**8);\\r\\n    string memory ...\n  JUMPDEST \t\t\t(10**8);\\r\\n    string memory ...\n  PUSH [tag] 47\t\t\tIntegerPart);\\r\\n    uint256 l...\n  DUP4 \t\t\t= strBy\n  PUSH [tag] 15\t\t\tIntegerPart);\\r\\n    uint256 l...\n  JUMP \t\t\tIntegerPart);\\r\\n    uint256 l...\ntag 47\t\t\tIntegerPart);\\r\\n    uint256 l...\n  JUMPDEST \t\t\tIntegerPart);\\r\\n    uint256 l...\n  PUSH [tag] 48\t\t\tmemory result = new bytes(len ...\n  PUSH [tag] 49\t\t\tnt256 j = 0;\\r\\n    for (uint2...\n  DUP3 \t\t\tint256 i = 0; i \n  PUSH [tag] 16\t\t\tnt256 j = 0;\\r\\n    for (uint2...\n  JUMP \t\t\tnt256 j = 0;\\r\\n    for (uint2...\ntag 49\t\t\tnt256 j = 0;\\r\\n    for (uint2...\n  JUMPDEST \t\t\tnt256 j = 0;\\r\\n    for (uint2...\n  DUP5 \t\t\t\\r\\n    \n  DUP5 \t\t\tn / \n  SLOAD \t\t\tn + len / 3\n  PUSH [tag] 12\t\t\tmemory result = new bytes(len ...\n  JUMP \t\t\tmemory result = new bytes(len ...\ntag 48\t\t\tmemory result = new bytes(len ...\n  JUMPDEST \t\t\tmemory result = new bytes(len ...\n  DUP3 \t\t\tbyte\n  SSTORE \t\t\t;\\r\\n    bytes memory result =...\n  POP \t\t\t bytes memory strBytes = bytes...\n  POP \t\t\t(10**8);\\r\\n    string memory ...\n  POP \t\t\t(10**8);\\r\\n    string memory ...\n  POP \t\t\t(10**8);\\r\\n    string memory ...\n  JUMP \t\t\t(10**8);\\r\\n    string memory ...\ntag 18\t\t\t        if ((len - i) % 3 == 0...\n  JUMPDEST \t\t\t        if ((len - i) % 3 == 0...\n  PUSH 0\t\t\t   \n  SWAP1 \t\t\t        if ((len - i) % 3 == 0...\n  JUMP \t\t\t        if ((len - i) % 3 == 0...\ntag 19\t\t\t,');\\r\\n        }\\r\\n        r...\n  JUMPDEST \t\t\t,');\\r\\n        }\\r\\n        r...\n  PUSH [tag] 52\t\t\t(abi.encodePacked(result, \".\",...\n  PUSH [tag] 18\t\t\t(abi.encodePacked(result, \".\",...\n  JUMP \t\t\t(abi.encodePacked(result, \".\",...\ntag 52\t\t\t(abi.encodePacked(result, \".\",...\n  JUMPDEST \t\t\t(abi.encodePacked(result, \".\",...\n  PUSH [tag] 53\t\t\tng(decimalPart / (10**6)), \"0 ...\n  DUP2 \t\t\trivate\n  DUP5 \t\t\tytes32\n  DUP5 \t\t\t\\r\\n  \n  PUSH [tag] 17\t\t\tng(decimalPart / (10**6)), \"0 ...\n  JUMP \t\t\tng(decimalPart / (10**6)), \"0 ...\ntag 53\t\t\tng(decimalPart / (10**6)), \"0 ...\n  JUMPDEST \t\t\tng(decimalPart / (10**6)), \"0 ...\n  POP \t\t\t    }\\r\\n    return string(abi...\n  POP \t\t\t,');\\r\\n        }\\r\\n        r...\n  POP \t\t\t,');\\r\\n        }\\r\\n        r...\n  JUMP \t\t\t,');\\r\\n        }\\r\\n        r...\ntag 20\t\t\tSWORD_HASH = keccak256(abi.enc...\n  JUMPDEST \t\t\tSWORD_HASH = keccak256(abi.enc...\ntag 55\t\t\t function uintToString(uint256...\n  JUMPDEST \t\t\t function uintToString(uint256...\n  DUP2 \t\t\ttri\n  DUP2 \t\t\tuintT\n  LT \t\t\ton uintToStrin\n  ISZERO \t\t\t function uintToString(uint256...\n  PUSH [tag] 57\t\t\t function uintToString(uint256...\n  JUMPI \t\t\t function uintToString(uint256...\n  PUSH [tag] 58\t\t\try) {\\r\\n        if (value == ...\n  PUSH 0\t\t\t \n  DUP3 \t\t\t {\\r\\n \n  PUSH [tag] 19\t\t\try) {\\r\\n        if (value == ...\n  JUMP \t\t\try) {\\r\\n        if (value == ...\ntag 58\t\t\try) {\\r\\n        if (value == ...\n  JUMPDEST \t\t\try) {\\r\\n        if (value == ...\n  PUSH 1\t\t\te\n  DUP2 \t\t\t priv\n  ADD \t\t\tlue) private \n  SWAP1 \t\t\tint256 value) private \n  POP \t\t\tint256 value) private \n  PUSH [tag] 55\t\t\t function uintToString(uint256...\n  JUMP \t\t\t function uintToString(uint256...\ntag 57\t\t\t function uintToString(uint256...\n  JUMPDEST \t\t\t function uintToString(uint256...\n  POP \t\t\tSWORD_HASH = keccak256(abi.enc...\n  POP \t\t\tSWORD_HASH = keccak256(abi.enc...\n  JUMP \t\t\tSWORD_HASH = keccak256(abi.enc...\ntag 21\t\t\t      }\\r\\n        uint256 tem...\n  JUMPDEST \t\t\t      }\\r\\n        uint256 tem...\n  PUSH 1F\t\t\t  \n  DUP3 \t\t\t   \n  GT \t\t\t\\n          \n  ISZERO \t\t\t {\\r\\n            digits++;\\r\\...\n  PUSH [tag] 60\t\t\t {\\r\\n            digits++;\\r\\...\n  JUMPI \t\t\t {\\r\\n            digits++;\\r\\...\n  PUSH [tag] 61\t\t\t= 10;\\r\\n        }\\r\\n        ...\n  DUP2 \t\t\tmemor\n  PUSH [tag] 9\t\t\t= 10;\\r\\n        }\\r\\n        ...\n  JUMP \t\t\t= 10;\\r\\n        }\\r\\n        ...\ntag 61\t\t\t= 10;\\r\\n        }\\r\\n        ...\n  JUMPDEST \t\t\t= 10;\\r\\n        }\\r\\n        ...\n  PUSH [tag] 62\t\t\talue != 0) {\\r\\n            di...\n  DUP5 \t\t\t        di\n  PUSH [tag] 10\t\t\talue != 0) {\\r\\n            di...\n  JUMP \t\t\talue != 0) {\\r\\n            di...\ntag 62\t\t\talue != 0) {\\r\\n            di...\n  JUMPDEST \t\t\talue != 0) {\\r\\n            di...\n  DUP2 \t\t\t  while \n  ADD \t\t\t      while (value != 0) {\\r\\n...\n  PUSH 20\t\t\t }\n  DUP6 \t\t\tuffer);\\r\\n \n  LT \t\t\tg(buffer);\\r\\n    }\\r\n  ISZERO \t\t\tring(buffer);\\r\\n    }\\r\\n}\n  PUSH [tag] 63\t\t\tring(buffer);\\r\\n    }\\r\\n}\n  JUMPI \t\t\tring(buffer);\\r\\n    }\\r\\n}\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 63\t\t\tring(buffer);\\r\\n    }\\r\\n}\n  JUMPDEST \t\t\tring(buffer);\\r\\n    }\\r\\n}\n  PUSH [tag] 64\t\t\t\n  PUSH [tag] 65\t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 10\t\t\t\n  JUMP \t\t\t\ntag 65\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 20\t\t\t\n  JUMP \t\t\t\ntag 64\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t digits++;\\r\\n            temp...\n  POP \t\t\t digits++;\\r\\n            temp...\ntag 60\t\t\t {\\r\\n            digits++;\\r\\...\n  JUMPDEST \t\t\t {\\r\\n            digits++;\\r\\...\n  POP \t\t\t      }\\r\\n        uint256 tem...\n  POP \t\t\t      }\\r\\n        uint256 tem...\n  POP \t\t\t      }\\r\\n        uint256 tem...\n  JUMP \t\t\t      }\\r\\n        uint256 tem...\ntag 22\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SHR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 23\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 68\t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  PUSH 8\t\t\t\n  MUL \t\t\t\n  PUSH [tag] 22\t\t\t\n  JUMP \t\t\t\ntag 68\t\t\t\n  JUMPDEST \t\t\t\n  NOT \t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 24\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 70\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 70\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP3 \t\t\t\n  PUSH 2\t\t\t\n  MUL \t\t\t\n  DUP3 \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 2\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 72\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 5\t\t\t\n  JUMP \t\t\t\ntag 72\t\t\t\n  JUMPDEST \t\t\t\n  PUSH FFFFFFFFFFFFFFFF\t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 73\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 74\t\t\t\n  PUSH [tag] 6\t\t\t\n  JUMP \t\t\t\ntag 74\t\t\t\n  JUMPDEST \t\t\t\ntag 73\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 75\t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 75\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 76\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 21\t\t\t\n  JUMP \t\t\t\ntag 76\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 78\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 79\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  DUP8 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 79\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 80\t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 24\t\t\t\n  JUMP \t\t\t\ntag 80\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 77\t\t\t\n  JUMP \t\t\t\ntag 78\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 81\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 9\t\t\t\n  JUMP \t\t\t\ntag 81\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\ntag 82\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 84\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 82\t\t\t\n  JUMP \t\t\t\ntag 84\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 85\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 86\t\t\t\n  PUSH 1F\t\t\t\n  DUP10 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 86\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\ntag 85\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 2\t\t\t\n  DUP9 \t\t\t\n  MUL \t\t\t\n  ADD \t\t\t\n  DUP9 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 77\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 4\t\t\tcontract HARDWARE {\\r\\n    str...\n  JUMPDEST \t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract HARDWARE {\\r\\n    str...\n  DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH 0\t\t\tcontract HARDWARE {\\r\\n    str...\n  CODECOPY \t\t\tcontract HARDWARE {\\r\\n    str...\n  PUSH 0\t\t\tcontract HARDWARE {\\r\\n    str...\n  RETURN \t\t\tcontract HARDWARE {\\r\\n    str...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 40\t\t\tcontract HARDWARE {\\r\\n    str...\n      MSTORE \t\t\tcontract HARDWARE {\\r\\n    str...\n      CALLVALUE \t\t\tcontract HARDWARE {\\r\\n    str...\n      DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n      ISZERO \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH [tag] 1\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPI \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 0\t\t\tcontract HARDWARE {\\r\\n    str...\n      DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n      REVERT \t\t\tcontract HARDWARE {\\r\\n    str...\n    tag 1\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPDEST \t\t\tcontract HARDWARE {\\r\\n    str...\n      POP \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 4\t\t\tcontract HARDWARE {\\r\\n    str...\n      CALLDATASIZE \t\t\tcontract HARDWARE {\\r\\n    str...\n      LT \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH [tag] 2\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPI \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 0\t\t\tcontract HARDWARE {\\r\\n    str...\n      CALLDATALOAD \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH E0\t\t\tcontract HARDWARE {\\r\\n    str...\n      SHR \t\t\tcontract HARDWARE {\\r\\n    str...\n      DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 117803E3\t\t\tcontract HARDWARE {\\r\\n    str...\n      EQ \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH [tag] 3\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPI \t\t\tcontract HARDWARE {\\r\\n    str...\n      DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 1D831D5C\t\t\tcontract HARDWARE {\\r\\n    str...\n      EQ \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH [tag] 4\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPI \t\t\tcontract HARDWARE {\\r\\n    str...\n      DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 2782CC7F\t\t\tcontract HARDWARE {\\r\\n    str...\n      EQ \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH [tag] 5\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPI \t\t\tcontract HARDWARE {\\r\\n    str...\n      DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 2C618954\t\t\tcontract HARDWARE {\\r\\n    str...\n      EQ \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH [tag] 6\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPI \t\t\tcontract HARDWARE {\\r\\n    str...\n    tag 2\t\t\tcontract HARDWARE {\\r\\n    str...\n      JUMPDEST \t\t\tcontract HARDWARE {\\r\\n    str...\n      PUSH 0\t\t\tcontract HARDWARE {\\r\\n    str...\n      DUP1 \t\t\tcontract HARDWARE {\\r\\n    str...\n      REVERT \t\t\tcontract HARDWARE {\\r\\n    str...\n    tag 3\t\t\tfunction OWNER() public view r...\n      JUMPDEST \t\t\tfunction OWNER() public view r...\n      PUSH [tag] 7\t\t\tfunction OWNER() public view r...\n      PUSH [tag] 8\t\t\tfunction OWNER() public view r...\n      JUMP \t\t\tfunction OWNER() public view r...\n    tag 7\t\t\tfunction OWNER() public view r...\n      JUMPDEST \t\t\tfunction OWNER() public view r...\n      PUSH 40\t\t\tfunction OWNER() public view r...\n      MLOAD \t\t\tfunction OWNER() public view r...\n      PUSH [tag] 9\t\t\tfunction OWNER() public view r...\n      SWAP2 \t\t\tfunction OWNER() public view r...\n      SWAP1 \t\t\tfunction OWNER() public view r...\n      PUSH [tag] 10\t\t\tfunction OWNER() public view r...\n      JUMP \t\t\tfunction OWNER() public view r...\n    tag 9\t\t\tfunction OWNER() public view r...\n      JUMPDEST \t\t\tfunction OWNER() public view r...\n      PUSH 40\t\t\tfunction OWNER() public view r...\n      MLOAD \t\t\tfunction OWNER() public view r...\n      DUP1 \t\t\tfunction OWNER() public view r...\n      SWAP2 \t\t\tfunction OWNER() public view r...\n      SUB \t\t\tfunction OWNER() public view r...\n      SWAP1 \t\t\tfunction OWNER() public view r...\n      RETURN \t\t\tfunction OWNER() public view r...\n    tag 4\t\t\tfunction TOKENS() public view ...\n      JUMPDEST \t\t\tfunction TOKENS() public view ...\n      PUSH [tag] 11\t\t\tfunction TOKENS() public view ...\n      PUSH [tag] 12\t\t\tfunction TOKENS() public view ...\n      JUMP \t\t\tfunction TOKENS() public view ...\n    tag 11\t\t\tfunction TOKENS() public view ...\n      JUMPDEST \t\t\tfunction TOKENS() public view ...\n      PUSH 40\t\t\tfunction TOKENS() public view ...\n      MLOAD \t\t\tfunction TOKENS() public view ...\n      PUSH [tag] 13\t\t\tfunction TOKENS() public view ...\n      SWAP2 \t\t\tfunction TOKENS() public view ...\n      SWAP1 \t\t\tfunction TOKENS() public view ...\n      PUSH [tag] 10\t\t\tfunction TOKENS() public view ...\n      JUMP \t\t\tfunction TOKENS() public view ...\n    tag 13\t\t\tfunction TOKENS() public view ...\n      JUMPDEST \t\t\tfunction TOKENS() public view ...\n      PUSH 40\t\t\tfunction TOKENS() public view ...\n      MLOAD \t\t\tfunction TOKENS() public view ...\n      DUP1 \t\t\tfunction TOKENS() public view ...\n      SWAP2 \t\t\tfunction TOKENS() public view ...\n      SUB \t\t\tfunction TOKENS() public view ...\n      SWAP1 \t\t\tfunction TOKENS() public view ...\n      RETURN \t\t\tfunction TOKENS() public view ...\n    tag 5\t\t\tfunction CONVERSION() public v...\n      JUMPDEST \t\t\tfunction CONVERSION() public v...\n      PUSH [tag] 14\t\t\tfunction CONVERSION() public v...\n      PUSH [tag] 15\t\t\tfunction CONVERSION() public v...\n      JUMP \t\t\tfunction CONVERSION() public v...\n    tag 14\t\t\tfunction CONVERSION() public v...\n      JUMPDEST \t\t\tfunction CONVERSION() public v...\n      PUSH 40\t\t\tfunction CONVERSION() public v...\n      MLOAD \t\t\tfunction CONVERSION() public v...\n      PUSH [tag] 16\t\t\tfunction CONVERSION() public v...\n      SWAP2 \t\t\tfunction CONVERSION() public v...\n      SWAP1 \t\t\tfunction CONVERSION() public v...\n      PUSH [tag] 10\t\t\tfunction CONVERSION() public v...\n      JUMP \t\t\tfunction CONVERSION() public v...\n    tag 16\t\t\tfunction CONVERSION() public v...\n      JUMPDEST \t\t\tfunction CONVERSION() public v...\n      PUSH 40\t\t\tfunction CONVERSION() public v...\n      MLOAD \t\t\tfunction CONVERSION() public v...\n      DUP1 \t\t\tfunction CONVERSION() public v...\n      SWAP2 \t\t\tfunction CONVERSION() public v...\n      SUB \t\t\tfunction CONVERSION() public v...\n      SWAP1 \t\t\tfunction CONVERSION() public v...\n      RETURN \t\t\tfunction CONVERSION() public v...\n    tag 6\t\t\tfunction AUTHORIZATION(string ...\n      JUMPDEST \t\t\tfunction AUTHORIZATION(string ...\n      PUSH [tag] 17\t\t\tfunction AUTHORIZATION(string ...\n      PUSH 4\t\t\tfunction AUTHORIZATION(string ...\n      DUP1 \t\t\tfunction AUTHORIZATION(string ...\n      CALLDATASIZE \t\t\tfunction AUTHORIZATION(string ...\n      SUB \t\t\tfunction AUTHORIZATION(string ...\n      DUP2 \t\t\tfunction AUTHORIZATION(string ...\n      ADD \t\t\tfunction AUTHORIZATION(string ...\n      SWAP1 \t\t\tfunction AUTHORIZATION(string ...\n      PUSH [tag] 18\t\t\tfunction AUTHORIZATION(string ...\n      SWAP2 \t\t\tfunction AUTHORIZATION(string ...\n      SWAP1 \t\t\tfunction AUTHORIZATION(string ...\n      PUSH [tag] 19\t\t\tfunction AUTHORIZATION(string ...\n      JUMP \t\t\tfunction AUTHORIZATION(string ...\n    tag 18\t\t\tfunction AUTHORIZATION(string ...\n      JUMPDEST \t\t\tfunction AUTHORIZATION(string ...\n      PUSH [tag] 20\t\t\tfunction AUTHORIZATION(string ...\n      JUMP \t\t\tfunction AUTHORIZATION(string ...\n    tag 17\t\t\tfunction AUTHORIZATION(string ...\n      JUMPDEST \t\t\tfunction AUTHORIZATION(string ...\n      STOP \t\t\tfunction AUTHORIZATION(string ...\n    tag 8\t\t\tfunction OWNER() public view r...\n      JUMPDEST \t\t\tfunction OWNER() public view r...\n      PUSH 60\t\t\tstring memory\n      PUSH 2\t\t\tloggedIn\n      PUSH 0\t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      SLOAD \t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      PUSH 100\t\t\tloggedIn\n      EXP \t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      DIV \t\t\tloggedIn\n      PUSH FF\t\t\tloggedIn\n      AND \t\t\tloggedIn\n      PUSH [tag] 22\t\t\trequire(loggedIn, \"Please logi...\n      JUMPI \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 40\t\t\trequire(loggedIn, \"Please logi...\n      MLOAD \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(loggedIn, \"Please logi...\n      DUP2 \t\t\trequire(loggedIn, \"Please logi...\n      MSTORE \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 4\t\t\trequire(loggedIn, \"Please logi...\n      ADD \t\t\trequire(loggedIn, \"Please logi...\n      PUSH [tag] 23\t\t\trequire(loggedIn, \"Please logi...\n      SWAP1 \t\t\trequire(loggedIn, \"Please logi...\n      PUSH [tag] 24\t\t\trequire(loggedIn, \"Please logi...\n      JUMP \t\t\trequire(loggedIn, \"Please logi...\n    tag 23\t\t\trequire(loggedIn, \"Please logi...\n      JUMPDEST \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 40\t\t\trequire(loggedIn, \"Please logi...\n      MLOAD \t\t\trequire(loggedIn, \"Please logi...\n      DUP1 \t\t\trequire(loggedIn, \"Please logi...\n      SWAP2 \t\t\trequire(loggedIn, \"Please logi...\n      SUB \t\t\trequire(loggedIn, \"Please logi...\n      SWAP1 \t\t\trequire(loggedIn, \"Please logi...\n      REVERT \t\t\trequire(loggedIn, \"Please logi...\n    tag 22\t\t\trequire(loggedIn, \"Please logi...\n      JUMPDEST \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 0\t\t\towner\n      DUP1 \t\t\treturn owner\n      SLOAD \t\t\treturn owner\n      PUSH [tag] 26\t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      PUSH [tag] 27\t\t\treturn owner\n      JUMP \t\t\treturn owner\n    tag 26\t\t\treturn owner\n      JUMPDEST \t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      PUSH 1F\t\t\treturn owner\n      ADD \t\t\treturn owner\n      PUSH 20\t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      SWAP2 \t\t\treturn owner\n      DIV \t\t\treturn owner\n      MUL \t\t\treturn owner\n      PUSH 20\t\t\treturn owner\n      ADD \t\t\treturn owner\n      PUSH 40\t\t\treturn owner\n      MLOAD \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      DUP2 \t\t\treturn owner\n      ADD \t\t\treturn owner\n      PUSH 40\t\t\treturn owner\n      MSTORE \t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      SWAP3 \t\t\treturn owner\n      SWAP2 \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      DUP2 \t\t\treturn owner\n      DUP2 \t\t\treturn owner\n      MSTORE \t\t\treturn owner\n      PUSH 20\t\t\treturn owner\n      ADD \t\t\treturn owner\n      DUP3 \t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      SLOAD \t\t\treturn owner\n      PUSH [tag] 28\t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      PUSH [tag] 27\t\t\treturn owner\n      JUMP \t\t\treturn owner\n    tag 28\t\t\treturn owner\n      JUMPDEST \t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      ISZERO \t\t\treturn owner\n      PUSH [tag] 29\t\t\treturn owner\n      JUMPI \t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      PUSH 1F\t\t\treturn owner\n      LT \t\t\treturn owner\n      PUSH [tag] 30\t\t\treturn owner\n      JUMPI \t\t\treturn owner\n      PUSH 100\t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      DUP4 \t\t\treturn owner\n      SLOAD \t\t\treturn owner\n      DIV \t\t\treturn owner\n      MUL \t\t\treturn owner\n      DUP4 \t\t\treturn owner\n      MSTORE \t\t\treturn owner\n      SWAP2 \t\t\treturn owner\n      PUSH 20\t\t\treturn owner\n      ADD \t\t\treturn owner\n      SWAP2 \t\t\treturn owner\n      PUSH [tag] 29\t\t\treturn owner\n      JUMP \t\t\treturn owner\n    tag 30\t\t\treturn owner\n      JUMPDEST \t\t\treturn owner\n      DUP3 \t\t\treturn owner\n      ADD \t\t\treturn owner\n      SWAP2 \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      PUSH 0\t\t\treturn owner\n      MSTORE \t\t\treturn owner\n      PUSH 20\t\t\treturn owner\n      PUSH 0\t\t\treturn owner\n      KECCAK256 \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n    tag 31\t\t\treturn owner\n      JUMPDEST \t\t\treturn owner\n      DUP2 \t\t\treturn owner\n      SLOAD \t\t\treturn owner\n      DUP2 \t\t\treturn owner\n      MSTORE \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      PUSH 1\t\t\treturn owner\n      ADD \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      PUSH 20\t\t\treturn owner\n      ADD \t\t\treturn owner\n      DUP1 \t\t\treturn owner\n      DUP4 \t\t\treturn owner\n      GT \t\t\treturn owner\n      PUSH [tag] 31\t\t\treturn owner\n      JUMPI \t\t\treturn owner\n      DUP3 \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      SUB \t\t\treturn owner\n      PUSH 1F\t\t\treturn owner\n      AND \t\t\treturn owner\n      DUP3 \t\t\treturn owner\n      ADD \t\t\treturn owner\n      SWAP2 \t\t\treturn owner\n    tag 29\t\t\treturn owner\n      JUMPDEST \t\t\treturn owner\n      POP \t\t\treturn owner\n      POP \t\t\treturn owner\n      POP \t\t\treturn owner\n      POP \t\t\treturn owner\n      POP \t\t\treturn owner\n      SWAP1 \t\t\treturn owner\n      POP \t\t\treturn owner\n      SWAP1 \t\t\tfunction OWNER() public view r...\n      JUMP \t\t\tfunction OWNER() public view r...\n    tag 12\t\t\tfunction TOKENS() public view ...\n      JUMPDEST \t\t\tfunction TOKENS() public view ...\n      PUSH 60\t\t\tstring memory\n      PUSH 2\t\t\tloggedIn\n      PUSH 0\t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      SLOAD \t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      PUSH 100\t\t\tloggedIn\n      EXP \t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      DIV \t\t\tloggedIn\n      PUSH FF\t\t\tloggedIn\n      AND \t\t\tloggedIn\n      PUSH [tag] 33\t\t\trequire(loggedIn, \"Please logi...\n      JUMPI \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 40\t\t\trequire(loggedIn, \"Please logi...\n      MLOAD \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(loggedIn, \"Please logi...\n      DUP2 \t\t\trequire(loggedIn, \"Please logi...\n      MSTORE \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 4\t\t\trequire(loggedIn, \"Please logi...\n      ADD \t\t\trequire(loggedIn, \"Please logi...\n      PUSH [tag] 34\t\t\trequire(loggedIn, \"Please logi...\n      SWAP1 \t\t\trequire(loggedIn, \"Please logi...\n      PUSH [tag] 24\t\t\trequire(loggedIn, \"Please logi...\n      JUMP \t\t\trequire(loggedIn, \"Please logi...\n    tag 34\t\t\trequire(loggedIn, \"Please logi...\n      JUMPDEST \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 40\t\t\trequire(loggedIn, \"Please logi...\n      MLOAD \t\t\trequire(loggedIn, \"Please logi...\n      DUP1 \t\t\trequire(loggedIn, \"Please logi...\n      SWAP2 \t\t\trequire(loggedIn, \"Please logi...\n      SUB \t\t\trequire(loggedIn, \"Please logi...\n      SWAP1 \t\t\trequire(loggedIn, \"Please logi...\n      REVERT \t\t\trequire(loggedIn, \"Please logi...\n    tag 33\t\t\trequire(loggedIn, \"Please logi...\n      JUMPDEST \t\t\trequire(loggedIn, \"Please logi...\n      PUSH [tag] 36\t\t\tformatBTC(btcAmount)\n      PUSH 1\t\t\tbtcAmount\n      SLOAD \t\t\tbtcAmount\n      PUSH [tag] 37\t\t\tformatBTC\n      JUMP \t\t\tformatBTC(btcAmount)\n    tag 36\t\t\tformatBTC(btcAmount)\n      JUMPDEST \t\t\tformatBTC(btcAmount)\n      SWAP1 \t\t\treturn formatBTC(btcAmount)\n      POP \t\t\treturn formatBTC(btcAmount)\n      SWAP1 \t\t\tfunction TOKENS() public view ...\n      JUMP \t\t\tfunction TOKENS() public view ...\n    tag 15\t\t\tfunction CONVERSION() public v...\n      JUMPDEST \t\t\tfunction CONVERSION() public v...\n      PUSH 60\t\t\tstring memory\n      PUSH 2\t\t\tloggedIn\n      PUSH 0\t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      SLOAD \t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      PUSH 100\t\t\tloggedIn\n      EXP \t\t\tloggedIn\n      SWAP1 \t\t\tloggedIn\n      DIV \t\t\tloggedIn\n      PUSH FF\t\t\tloggedIn\n      AND \t\t\tloggedIn\n      PUSH [tag] 39\t\t\trequire(loggedIn, \"Please logi...\n      JUMPI \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 40\t\t\trequire(loggedIn, \"Please logi...\n      MLOAD \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(loggedIn, \"Please logi...\n      DUP2 \t\t\trequire(loggedIn, \"Please logi...\n      MSTORE \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 4\t\t\trequire(loggedIn, \"Please logi...\n      ADD \t\t\trequire(loggedIn, \"Please logi...\n      PUSH [tag] 40\t\t\trequire(loggedIn, \"Please logi...\n      SWAP1 \t\t\trequire(loggedIn, \"Please logi...\n      PUSH [tag] 24\t\t\trequire(loggedIn, \"Please logi...\n      JUMP \t\t\trequire(loggedIn, \"Please logi...\n    tag 40\t\t\trequire(loggedIn, \"Please logi...\n      JUMPDEST \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 40\t\t\trequire(loggedIn, \"Please logi...\n      MLOAD \t\t\trequire(loggedIn, \"Please logi...\n      DUP1 \t\t\trequire(loggedIn, \"Please logi...\n      SWAP2 \t\t\trequire(loggedIn, \"Please logi...\n      SUB \t\t\trequire(loggedIn, \"Please logi...\n      SWAP1 \t\t\trequire(loggedIn, \"Please logi...\n      REVERT \t\t\trequire(loggedIn, \"Please logi...\n    tag 39\t\t\trequire(loggedIn, \"Please logi...\n      JUMPDEST \t\t\trequire(loggedIn, \"Please logi...\n      PUSH 0\t\t\tuint256 btcToUsdRate\n      PUSH 6989\t\t\t27017\n      SWAP1 \t\t\tuint256 btcToUsdRate = 27017\n      POP \t\t\tuint256 btcToUsdRate = 27017\n      PUSH 0\t\t\tuint256 usdAmount\n      PUSH 5F5E100\t\t\t10**8\n      DUP3 \t\t\tbtcToUsdRate\n      PUSH 1\t\t\tbtcAmount\n      SLOAD \t\t\tbtcAmount\n      PUSH [tag] 42\t\t\tbtcAmount * btcToUsdRate\n      SWAP2 \t\t\tbtcAmount * btcToUsdRate\n      SWAP1 \t\t\tbtcAmount * btcToUsdRate\n      PUSH [tag] 43\t\t\tbtcAmount * btcToUsdRate\n      JUMP \t\t\tbtcAmount * btcToUsdRate\n    tag 42\t\t\tbtcAmount * btcToUsdRate\n      JUMPDEST \t\t\tbtcAmount * btcToUsdRate\n      PUSH [tag] 44\t\t\tbtcAmount * btcToUsdRate / (10...\n      SWAP2 \t\t\tbtcAmount * btcToUsdRate / (10...\n      SWAP1 \t\t\tbtcAmount * btcToUsdRate / (10...\n      PUSH [tag] 45\t\t\tbtcAmount * btcToUsdRate / (10...\n      JUMP \t\t\tbtcAmount * btcToUsdRate / (10...\n    tag 44\t\t\tbtcAmount * btcToUsdRate / (10...\n      JUMPDEST \t\t\tbtcAmount * btcToUsdRate / (10...\n      SWAP1 \t\t\tuint256 usdAmount = btcAmount ...\n      POP \t\t\tuint256 usdAmount = btcAmount ...\n      PUSH [tag] 46\t\t\tformatUSD(usdAmount)\n      DUP2 \t\t\tusdAmount\n      PUSH [tag] 47\t\t\tformatUSD\n      JUMP \t\t\tformatUSD(usdAmount)\n    tag 46\t\t\tformatUSD(usdAmount)\n      JUMPDEST \t\t\tformatUSD(usdAmount)\n      SWAP3 \t\t\treturn formatUSD(usdAmount)\n      POP \t\t\treturn formatUSD(usdAmount)\n      POP \t\t\treturn formatUSD(usdAmount)\n      POP \t\t\treturn formatUSD(usdAmount)\n      SWAP1 \t\t\tfunction CONVERSION() public v...\n      JUMP \t\t\tfunction CONVERSION() public v...\n    tag 20\t\t\tfunction AUTHORIZATION(string ...\n      JUMPDEST \t\t\tfunction AUTHORIZATION(string ...\n      DUP1 \t\t\tpassword\n      PUSH 40\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      MLOAD \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      PUSH 20\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      ADD \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      PUSH [tag] 49\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      SWAP1 \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      PUSH [tag] 50\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      JUMP \t\t\tabi.encodePacked(\"Xy~01k!*\")\n    tag 49\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      JUMPDEST \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      PUSH 40\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      MLOAD \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      PUSH 20\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      DUP2 \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      DUP4 \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      SUB \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      SUB \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      DUP2 \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      MSTORE \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      SWAP1 \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      PUSH 40\t\t\tabi.encodePacked(\"Xy~01k!*\")\n      MSTORE \t\t\tabi.encodePacked(\"Xy~01k!*\")\n      DUP1 \t\t\tkeccak256(abi.encodePacked(\"Xy...\n      MLOAD \t\t\tkeccak256(abi.encodePacked(\"Xy...\n      SWAP1 \t\t\tkeccak256(abi.encodePacked(\"Xy...\n      PUSH 20\t\t\tkeccak256(abi.encodePacked(\"Xy...\n      ADD \t\t\tkeccak256(abi.encodePacked(\"Xy...\n      KECCAK256 \t\t\tkeccak256(abi.encodePacked(\"Xy...\n      DUP2 \t\t\tpassword\n      PUSH 40\t\t\tabi.encodePacked(bytes(passwor...\n      MLOAD \t\t\tabi.encodePacked(bytes(passwor...\n      PUSH 20\t\t\tabi.encodePacked(bytes(passwor...\n      ADD \t\t\tabi.encodePacked(bytes(passwor...\n      PUSH [tag] 51\t\t\tabi.encodePacked(bytes(passwor...\n      SWAP2 \t\t\tabi.encodePacked(bytes(passwor...\n      SWAP1 \t\t\tabi.encodePacked(bytes(passwor...\n      PUSH [tag] 52\t\t\tabi.encodePacked(bytes(passwor...\n      JUMP \t\t\tabi.encodePacked(bytes(passwor...\n    tag 51\t\t\tabi.encodePacked(bytes(passwor...\n      JUMPDEST \t\t\tabi.encodePacked(bytes(passwor...\n      PUSH 40\t\t\tabi.encodePacked(bytes(passwor...\n      MLOAD \t\t\tabi.encodePacked(bytes(passwor...\n      PUSH 20\t\t\tabi.encodePacked(bytes(passwor...\n      DUP2 \t\t\tabi.encodePacked(bytes(passwor...\n      DUP4 \t\t\tabi.encodePacked(bytes(passwor...\n      SUB \t\t\tabi.encodePacked(bytes(passwor...\n      SUB \t\t\tabi.encodePacked(bytes(passwor...\n      DUP2 \t\t\tabi.encodePacked(bytes(passwor...\n      MSTORE \t\t\tabi.encodePacked(bytes(passwor...\n      SWAP1 \t\t\tabi.encodePacked(bytes(passwor...\n      PUSH 40\t\t\tabi.encodePacked(bytes(passwor...\n      MSTORE \t\t\tabi.encodePacked(bytes(passwor...\n      DUP1 \t\t\tkeccak256(abi.encodePacked(byt...\n      MLOAD \t\t\tkeccak256(abi.encodePacked(byt...\n      SWAP1 \t\t\tkeccak256(abi.encodePacked(byt...\n      PUSH 20\t\t\tkeccak256(abi.encodePacked(byt...\n      ADD \t\t\tkeccak256(abi.encodePacked(byt...\n      KECCAK256 \t\t\tkeccak256(abi.encodePacked(byt...\n      EQ \t\t\tkeccak256(abi.encodePacked(byt...\n      PUSH [tag] 53\t\t\trequire(keccak256(abi.encodePa...\n      JUMPI \t\t\trequire(keccak256(abi.encodePa...\n      PUSH 40\t\t\trequire(keccak256(abi.encodePa...\n      MLOAD \t\t\trequire(keccak256(abi.encodePa...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(keccak256(abi.encodePa...\n      DUP2 \t\t\trequire(keccak256(abi.encodePa...\n      MSTORE \t\t\trequire(keccak256(abi.encodePa...\n      PUSH 4\t\t\trequire(keccak256(abi.encodePa...\n      ADD \t\t\trequire(keccak256(abi.encodePa...\n      PUSH [tag] 54\t\t\trequire(keccak256(abi.encodePa...\n      SWAP1 \t\t\trequire(keccak256(abi.encodePa...\n      PUSH [tag] 55\t\t\trequire(keccak256(abi.encodePa...\n      JUMP \t\t\trequire(keccak256(abi.encodePa...\n    tag 54\t\t\trequire(keccak256(abi.encodePa...\n      JUMPDEST \t\t\trequire(keccak256(abi.encodePa...\n      PUSH 40\t\t\trequire(keccak256(abi.encodePa...\n      MLOAD \t\t\trequire(keccak256(abi.encodePa...\n      DUP1 \t\t\trequire(keccak256(abi.encodePa...\n      SWAP2 \t\t\trequire(keccak256(abi.encodePa...\n      SUB \t\t\trequire(keccak256(abi.encodePa...\n      SWAP1 \t\t\trequire(keccak256(abi.encodePa...\n      REVERT \t\t\trequire(keccak256(abi.encodePa...\n    tag 53\t\t\trequire(keccak256(abi.encodePa...\n      JUMPDEST \t\t\trequire(keccak256(abi.encodePa...\n      PUSH 1\t\t\ttrue\n      PUSH 2\t\t\tloggedIn\n      PUSH 0\t\t\tloggedIn\n      PUSH 100\t\t\tloggedIn = true\n      EXP \t\t\tloggedIn = true\n      DUP2 \t\t\tloggedIn = true\n      SLOAD \t\t\tloggedIn = true\n      DUP2 \t\t\tloggedIn = true\n      PUSH FF\t\t\tloggedIn = true\n      MUL \t\t\tloggedIn = true\n      NOT \t\t\tloggedIn = true\n      AND \t\t\tloggedIn = true\n      SWAP1 \t\t\tloggedIn = true\n      DUP4 \t\t\tloggedIn = true\n      ISZERO \t\t\tloggedIn = true\n      ISZERO \t\t\tloggedIn = true\n      MUL \t\t\tloggedIn = true\n      OR \t\t\tloggedIn = true\n      SWAP1 \t\t\tloggedIn = true\n      SSTORE \t\t\tloggedIn = true\n      POP \t\t\tloggedIn = true\n      POP \t\t\tfunction AUTHORIZATION(string ...\n      POP \t\t\tfunction AUTHORIZATION(string ...\n      JUMP \t\t\tfunction AUTHORIZATION(string ...\n    tag 37\t\t\tfunction formatBTC(uint256 amo...\n      JUMPDEST \t\t\tfunction formatBTC(uint256 amo...\n      PUSH 60\t\t\tstring memory\n      PUSH 0\t\t\tuint256 integerPart\n      PUSH 5F5E100\t\t\t10**8\n      DUP4 \t\t\tamount\n      PUSH [tag] 58\t\t\tamount / (10**8)\n      SWAP2 \t\t\tamount / (10**8)\n      SWAP1 \t\t\tamount / (10**8)\n      PUSH [tag] 45\t\t\tamount / (10**8)\n      JUMP \t\t\tamount / (10**8)\n    tag 58\t\t\tamount / (10**8)\n      JUMPDEST \t\t\tamount / (10**8)\n      SWAP1 \t\t\tuint256 integerPart = amount /...\n      POP \t\t\tuint256 integerPart = amount /...\n      PUSH 0\t\t\tuint256 decimalPart\n      PUSH 5F5E100\t\t\t10**8\n      DUP5 \t\t\tamount\n      PUSH [tag] 59\t\t\tamount % (10**8)\n      SWAP2 \t\t\tamount % (10**8)\n      SWAP1 \t\t\tamount % (10**8)\n      PUSH [tag] 60\t\t\tamount % (10**8)\n      JUMP \t\t\tamount % (10**8)\n    tag 59\t\t\tamount % (10**8)\n      JUMPDEST \t\t\tamount % (10**8)\n      SWAP1 \t\t\tuint256 decimalPart = amount %...\n      POP \t\t\tuint256 decimalPart = amount %...\n      PUSH 0\t\t\tstring memory strIntegerPart\n      PUSH [tag] 61\t\t\tuintToString(integerPart)\n      DUP4 \t\t\tintegerPart\n      PUSH [tag] 62\t\t\tuintToString\n      JUMP \t\t\tuintToString(integerPart)\n    tag 61\t\t\tuintToString(integerPart)\n      JUMPDEST \t\t\tuintToString(integerPart)\n      SWAP1 \t\t\tstring memory strIntegerPart =...\n      POP \t\t\tstring memory strIntegerPart =...\n      PUSH 0\t\t\tbytes memory strBytes\n      DUP2 \t\t\tstrIntegerPart\n      SWAP1 \t\t\tbytes memory strBytes = bytes(...\n      POP \t\t\tbytes memory strBytes = bytes(...\n      PUSH 0\t\t\tuint256 len\n      DUP2 \t\t\tstrBytes\n      MLOAD \t\t\tstrBytes.length\n      SWAP1 \t\t\tuint256 len = strBytes.length\n      POP \t\t\tuint256 len = strBytes.length\n      PUSH 0\t\t\tbytes memory result\n      PUSH 3\t\t\t3\n      DUP3 \t\t\tlen\n      PUSH [tag] 63\t\t\tlen / 3\n      SWAP2 \t\t\tlen / 3\n      SWAP1 \t\t\tlen / 3\n      PUSH [tag] 45\t\t\tlen / 3\n      JUMP \t\t\tlen / 3\n    tag 63\t\t\tlen / 3\n      JUMPDEST \t\t\tlen / 3\n      DUP3 \t\t\tlen\n      PUSH [tag] 64\t\t\tlen + len / 3\n      SWAP2 \t\t\tlen + len / 3\n      SWAP1 \t\t\tlen + len / 3\n      PUSH [tag] 65\t\t\tlen + len / 3\n      JUMP \t\t\tlen + len / 3\n    tag 64\t\t\tlen + len / 3\n      JUMPDEST \t\t\tlen + len / 3\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnew bytes(len + len / 3)\n      DUP2 \t\t\tnew bytes(len + len / 3)\n      GT \t\t\tnew bytes(len + len / 3)\n      ISZERO \t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 66\t\t\tnew bytes(len + len / 3)\n      JUMPI \t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 67\t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 68\t\t\tnew bytes(len + len / 3)\n      JUMP \t\t\tnew bytes(len + len / 3)\n    tag 67\t\t\tnew bytes(len + len / 3)\n      JUMPDEST \t\t\tnew bytes(len + len / 3)\n    tag 66\t\t\tnew bytes(len + len / 3)\n      JUMPDEST \t\t\tnew bytes(len + len / 3)\n      PUSH 40\t\t\tnew bytes(len + len / 3)\n      MLOAD \t\t\tnew bytes(len + len / 3)\n      SWAP1 \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      MSTORE \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      PUSH 1F\t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      PUSH 1F\t\t\tnew bytes(len + len / 3)\n      NOT \t\t\tnew bytes(len + len / 3)\n      AND \t\t\tnew bytes(len + len / 3)\n      PUSH 20\t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      PUSH 40\t\t\tnew bytes(len + len / 3)\n      MSTORE \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      ISZERO \t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 69\t\t\tnew bytes(len + len / 3)\n      JUMPI \t\t\tnew bytes(len + len / 3)\n      DUP2 \t\t\tnew bytes(len + len / 3)\n      PUSH 20\t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      PUSH 1\t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      MUL \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      CALLDATASIZE \t\t\tnew bytes(len + len / 3)\n      DUP4 \t\t\tnew bytes(len + len / 3)\n      CALLDATACOPY \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      SWAP2 \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n      SWAP1 \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n    tag 69\t\t\tnew bytes(len + len / 3)\n      JUMPDEST \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n      SWAP1 \t\t\tbytes memory result = new byte...\n      POP \t\t\tbytes memory result = new byte...\n      PUSH 0\t\t\tuint256 j\n      DUP1 \t\t\tuint256 i\n    tag 70\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < len; i...\n      DUP4 \t\t\tlen\n      DUP2 \t\t\ti\n      LT \t\t\ti < len\n      ISZERO \t\t\tfor (uint256 i = 0; i < len; i...\n      PUSH [tag] 71\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMPI \t\t\tfor (uint256 i = 0; i < len; i...\n      PUSH 0\t\t\t0\n      PUSH 3\t\t\t3\n      DUP3 \t\t\ti\n      DUP7 \t\t\tlen\n      PUSH [tag] 73\t\t\tlen - i\n      SWAP2 \t\t\tlen - i\n      SWAP1 \t\t\tlen - i\n      PUSH [tag] 74\t\t\tlen - i\n      JUMP \t\t\tlen - i\n    tag 73\t\t\tlen - i\n      JUMPDEST \t\t\tlen - i\n      PUSH [tag] 75\t\t\t(len - i) % 3\n      SWAP2 \t\t\t(len - i) % 3\n      SWAP1 \t\t\t(len - i) % 3\n      PUSH [tag] 60\t\t\t(len - i) % 3\n      JUMP \t\t\t(len - i) % 3\n    tag 75\t\t\t(len - i) % 3\n      JUMPDEST \t\t\t(len - i) % 3\n      EQ \t\t\t(len - i) % 3 == 0\n      DUP1 \t\t\t(len - i) % 3 == 0 && i != 0\n      ISZERO \t\t\t(len - i) % 3 == 0 && i != 0\n      PUSH [tag] 76\t\t\t(len - i) % 3 == 0 && i != 0\n      JUMPI \t\t\t(len - i) % 3 == 0 && i != 0\n      POP \t\t\t(len - i) % 3 == 0 && i != 0\n      PUSH 0\t\t\t0\n      DUP2 \t\t\ti\n      EQ \t\t\ti != 0\n      ISZERO \t\t\ti != 0\n    tag 76\t\t\t(len - i) % 3 == 0 && i != 0\n      JUMPDEST \t\t\t(len - i) % 3 == 0 && i != 0\n      ISZERO \t\t\tif ((len - i) % 3 == 0 && i !=...\n      PUSH [tag] 77\t\t\tif ((len - i) % 3 == 0 && i !=...\n      JUMPI \t\t\tif ((len - i) % 3 == 0 && i !=...\n      PUSH 2C00000000000000000000000000000000000000000000000000000000000000\t\t\tbytes1(',')\n      DUP4 \t\t\tresult\n      DUP4 \t\t\tj++\n      DUP1 \t\t\tj++\n      PUSH [tag] 78\t\t\tj++\n      SWAP1 \t\t\tj++\n      PUSH [tag] 79\t\t\tj++\n      JUMP \t\t\tj++\n    tag 78\t\t\tj++\n      JUMPDEST \t\t\tj++\n      SWAP5 \t\t\tj++\n      POP \t\t\tj++\n      DUP2 \t\t\tresult[j++]\n      MLOAD \t\t\tresult[j++]\n      DUP2 \t\t\tresult[j++]\n      LT \t\t\tresult[j++]\n      PUSH [tag] 80\t\t\tresult[j++]\n      JUMPI \t\t\tresult[j++]\n      PUSH [tag] 81\t\t\tresult[j++]\n      PUSH [tag] 82\t\t\tresult[j++]\n      JUMP \t\t\tresult[j++]\n    tag 81\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n    tag 80\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n      PUSH 20\t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      SWAP1 \t\t\tresult[j++] = bytes1(',')\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tresult[j++] = bytes1(',')\n      NOT \t\t\tresult[j++] = bytes1(',')\n      AND \t\t\tresult[j++] = bytes1(',')\n      SWAP1 \t\t\tresult[j++] = bytes1(',')\n      DUP2 \t\t\tresult[j++] = bytes1(',')\n      PUSH 0\t\t\tresult[j++] = bytes1(',')\n      BYTE \t\t\tresult[j++] = bytes1(',')\n      SWAP1 \t\t\tresult[j++] = bytes1(',')\n      MSTORE8 \t\t\tresult[j++] = bytes1(',')\n      POP \t\t\tresult[j++] = bytes1(',')\n    tag 77\t\t\tif ((len - i) % 3 == 0 && i !=...\n      JUMPDEST \t\t\tif ((len - i) % 3 == 0 && i !=...\n      DUP5 \t\t\tstrBytes\n      DUP2 \t\t\ti\n      DUP2 \t\t\tstrBytes[i]\n      MLOAD \t\t\tstrBytes[i]\n      DUP2 \t\t\tstrBytes[i]\n      LT \t\t\tstrBytes[i]\n      PUSH [tag] 83\t\t\tstrBytes[i]\n      JUMPI \t\t\tstrBytes[i]\n      PUSH [tag] 84\t\t\tstrBytes[i]\n      PUSH [tag] 82\t\t\tstrBytes[i]\n      JUMP \t\t\tstrBytes[i]\n    tag 84\t\t\tstrBytes[i]\n      JUMPDEST \t\t\tstrBytes[i]\n    tag 83\t\t\tstrBytes[i]\n      JUMPDEST \t\t\tstrBytes[i]\n      PUSH 20\t\t\tstrBytes[i]\n      ADD \t\t\tstrBytes[i]\n      ADD \t\t\tstrBytes[i]\n      MLOAD \t\t\tstrBytes[i]\n      PUSH F8\t\t\tstrBytes[i]\n      SHR \t\t\tstrBytes[i]\n      PUSH F8\t\t\tstrBytes[i]\n      SHL \t\t\tstrBytes[i]\n      DUP4 \t\t\tresult\n      DUP4 \t\t\tj++\n      DUP1 \t\t\tj++\n      PUSH [tag] 85\t\t\tj++\n      SWAP1 \t\t\tj++\n      PUSH [tag] 79\t\t\tj++\n      JUMP \t\t\tj++\n    tag 85\t\t\tj++\n      JUMPDEST \t\t\tj++\n      SWAP5 \t\t\tj++\n      POP \t\t\tj++\n      DUP2 \t\t\tresult[j++]\n      MLOAD \t\t\tresult[j++]\n      DUP2 \t\t\tresult[j++]\n      LT \t\t\tresult[j++]\n      PUSH [tag] 86\t\t\tresult[j++]\n      JUMPI \t\t\tresult[j++]\n      PUSH [tag] 87\t\t\tresult[j++]\n      PUSH [tag] 82\t\t\tresult[j++]\n      JUMP \t\t\tresult[j++]\n    tag 87\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n    tag 86\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n      PUSH 20\t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      SWAP1 \t\t\tresult[j++] = strBytes[i]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tresult[j++] = strBytes[i]\n      NOT \t\t\tresult[j++] = strBytes[i]\n      AND \t\t\tresult[j++] = strBytes[i]\n      SWAP1 \t\t\tresult[j++] = strBytes[i]\n      DUP2 \t\t\tresult[j++] = strBytes[i]\n      PUSH 0\t\t\tresult[j++] = strBytes[i]\n      BYTE \t\t\tresult[j++] = strBytes[i]\n      SWAP1 \t\t\tresult[j++] = strBytes[i]\n      MSTORE8 \t\t\tresult[j++] = strBytes[i]\n      POP \t\t\tresult[j++] = strBytes[i]\n      DUP1 \t\t\ti++\n      DUP1 \t\t\ti++\n      PUSH [tag] 88\t\t\ti++\n      SWAP1 \t\t\ti++\n      PUSH [tag] 79\t\t\ti++\n      JUMP \t\t\ti++\n    tag 88\t\t\ti++\n      JUMPDEST \t\t\ti++\n      SWAP2 \t\t\ti++\n      POP \t\t\ti++\n      POP \t\t\ti++\n      PUSH [tag] 70\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMP \t\t\tfor (uint256 i = 0; i < len; i...\n    tag 71\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < len; i...\n      POP \t\t\tfor (uint256 i = 0; i < len; i...\n      DUP2 \t\t\tresult\n      PUSH [tag] 89\t\t\tuintToString(decimalPart / (10...\n      PUSH F4240\t\t\t10**6\n      DUP9 \t\t\tdecimalPart\n      PUSH [tag] 90\t\t\tdecimalPart / (10**6)\n      SWAP2 \t\t\tdecimalPart / (10**6)\n      SWAP1 \t\t\tdecimalPart / (10**6)\n      PUSH [tag] 45\t\t\tdecimalPart / (10**6)\n      JUMP \t\t\tdecimalPart / (10**6)\n    tag 90\t\t\tdecimalPart / (10**6)\n      JUMPDEST \t\t\tdecimalPart / (10**6)\n      PUSH [tag] 62\t\t\tuintToString\n      JUMP \t\t\tuintToString(decimalPart / (10...\n    tag 89\t\t\tuintToString(decimalPart / (10...\n      JUMPDEST \t\t\tuintToString(decimalPart / (10...\n      PUSH 40\t\t\tabi.encodePacked(result, \".\", ...\n      MLOAD \t\t\tabi.encodePacked(result, \".\", ...\n      PUSH 20\t\t\tabi.encodePacked(result, \".\", ...\n      ADD \t\t\tabi.encodePacked(result, \".\", ...\n      PUSH [tag] 91\t\t\tabi.encodePacked(result, \".\", ...\n      SWAP3 \t\t\tabi.encodePacked(result, \".\", ...\n      SWAP2 \t\t\tabi.encodePacked(result, \".\", ...\n      SWAP1 \t\t\tabi.encodePacked(result, \".\", ...\n      PUSH [tag] 92\t\t\tabi.encodePacked(result, \".\", ...\n      JUMP \t\t\tabi.encodePacked(result, \".\", ...\n    tag 91\t\t\tabi.encodePacked(result, \".\", ...\n      JUMPDEST \t\t\tabi.encodePacked(result, \".\", ...\n      PUSH 40\t\t\tabi.encodePacked(result, \".\", ...\n      MLOAD \t\t\tabi.encodePacked(result, \".\", ...\n      PUSH 20\t\t\tabi.encodePacked(result, \".\", ...\n      DUP2 \t\t\tabi.encodePacked(result, \".\", ...\n      DUP4 \t\t\tabi.encodePacked(result, \".\", ...\n      SUB \t\t\tabi.encodePacked(result, \".\", ...\n      SUB \t\t\tabi.encodePacked(result, \".\", ...\n      DUP2 \t\t\tabi.encodePacked(result, \".\", ...\n      MSTORE \t\t\tabi.encodePacked(result, \".\", ...\n      SWAP1 \t\t\tabi.encodePacked(result, \".\", ...\n      PUSH 40\t\t\tabi.encodePacked(result, \".\", ...\n      MSTORE \t\t\tabi.encodePacked(result, \".\", ...\n      SWAP8 \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      SWAP2 \t\t\tfunction formatBTC(uint256 amo...\n      SWAP1 \t\t\tfunction formatBTC(uint256 amo...\n      POP \t\t\tfunction formatBTC(uint256 amo...\n      JUMP \t\t\tfunction formatBTC(uint256 amo...\n    tag 47\t\t\tfunction formatUSD(uint256 amo...\n      JUMPDEST \t\t\tfunction formatUSD(uint256 amo...\n      PUSH 60\t\t\tstring memory\n      PUSH 0\t\t\tstring memory strAmount\n      PUSH [tag] 94\t\t\tuintToString(amount)\n      DUP4 \t\t\tamount\n      PUSH [tag] 62\t\t\tuintToString\n      JUMP \t\t\tuintToString(amount)\n    tag 94\t\t\tuintToString(amount)\n      JUMPDEST \t\t\tuintToString(amount)\n      SWAP1 \t\t\tstring memory strAmount = uint...\n      POP \t\t\tstring memory strAmount = uint...\n      PUSH 0\t\t\tbytes memory strBytes\n      DUP2 \t\t\tstrAmount\n      SWAP1 \t\t\tbytes memory strBytes = bytes(...\n      POP \t\t\tbytes memory strBytes = bytes(...\n      PUSH 0\t\t\tuint256 len\n      DUP2 \t\t\tstrBytes\n      MLOAD \t\t\tstrBytes.length\n      SWAP1 \t\t\tuint256 len = strBytes.length\n      POP \t\t\tuint256 len = strBytes.length\n      PUSH 6\t\t\t6\n      DUP2 \t\t\tlen\n      GT \t\t\tlen <= 6\n      PUSH [tag] 95\t\t\tif (len <= 6) {\\r\\n           ...\n      JUMPI \t\t\tif (len <= 6) {\\r\\n           ...\n      DUP3 \t\t\tstrAmount\n      PUSH 40\t\t\tabi.encodePacked(\"$\", strAmoun...\n      MLOAD \t\t\tabi.encodePacked(\"$\", strAmoun...\n      PUSH 20\t\t\tabi.encodePacked(\"$\", strAmoun...\n      ADD \t\t\tabi.encodePacked(\"$\", strAmoun...\n      PUSH [tag] 96\t\t\tabi.encodePacked(\"$\", strAmoun...\n      SWAP2 \t\t\tabi.encodePacked(\"$\", strAmoun...\n      SWAP1 \t\t\tabi.encodePacked(\"$\", strAmoun...\n      PUSH [tag] 97\t\t\tabi.encodePacked(\"$\", strAmoun...\n      JUMP \t\t\tabi.encodePacked(\"$\", strAmoun...\n    tag 96\t\t\tabi.encodePacked(\"$\", strAmoun...\n      JUMPDEST \t\t\tabi.encodePacked(\"$\", strAmoun...\n      PUSH 40\t\t\tabi.encodePacked(\"$\", strAmoun...\n      MLOAD \t\t\tabi.encodePacked(\"$\", strAmoun...\n      PUSH 20\t\t\tabi.encodePacked(\"$\", strAmoun...\n      DUP2 \t\t\tabi.encodePacked(\"$\", strAmoun...\n      DUP4 \t\t\tabi.encodePacked(\"$\", strAmoun...\n      SUB \t\t\tabi.encodePacked(\"$\", strAmoun...\n      SUB \t\t\tabi.encodePacked(\"$\", strAmoun...\n      DUP2 \t\t\tabi.encodePacked(\"$\", strAmoun...\n      MSTORE \t\t\tabi.encodePacked(\"$\", strAmoun...\n      SWAP1 \t\t\tabi.encodePacked(\"$\", strAmoun...\n      PUSH 40\t\t\tabi.encodePacked(\"$\", strAmoun...\n      MSTORE \t\t\tabi.encodePacked(\"$\", strAmoun...\n      SWAP4 \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      PUSH [tag] 93\t\t\treturn string(abi.encodePacked...\n      JUMP \t\t\treturn string(abi.encodePacked...\n    tag 95\t\t\tif (len <= 6) {\\r\\n           ...\n      JUMPDEST \t\t\tif (len <= 6) {\\r\\n           ...\n      PUSH 0\t\t\tbytes memory result\n      PUSH 3\t\t\t3\n      DUP3 \t\t\tlen\n      PUSH [tag] 98\t\t\tlen / 3\n      SWAP2 \t\t\tlen / 3\n      SWAP1 \t\t\tlen / 3\n      PUSH [tag] 45\t\t\tlen / 3\n      JUMP \t\t\tlen / 3\n    tag 98\t\t\tlen / 3\n      JUMPDEST \t\t\tlen / 3\n      DUP3 \t\t\tlen\n      PUSH [tag] 99\t\t\tlen + len / 3\n      SWAP2 \t\t\tlen + len / 3\n      SWAP1 \t\t\tlen + len / 3\n      PUSH [tag] 65\t\t\tlen + len / 3\n      JUMP \t\t\tlen + len / 3\n    tag 99\t\t\tlen + len / 3\n      JUMPDEST \t\t\tlen + len / 3\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnew bytes(len + len / 3)\n      DUP2 \t\t\tnew bytes(len + len / 3)\n      GT \t\t\tnew bytes(len + len / 3)\n      ISZERO \t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 100\t\t\tnew bytes(len + len / 3)\n      JUMPI \t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 101\t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 68\t\t\tnew bytes(len + len / 3)\n      JUMP \t\t\tnew bytes(len + len / 3)\n    tag 101\t\t\tnew bytes(len + len / 3)\n      JUMPDEST \t\t\tnew bytes(len + len / 3)\n    tag 100\t\t\tnew bytes(len + len / 3)\n      JUMPDEST \t\t\tnew bytes(len + len / 3)\n      PUSH 40\t\t\tnew bytes(len + len / 3)\n      MLOAD \t\t\tnew bytes(len + len / 3)\n      SWAP1 \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      MSTORE \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      PUSH 1F\t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      PUSH 1F\t\t\tnew bytes(len + len / 3)\n      NOT \t\t\tnew bytes(len + len / 3)\n      AND \t\t\tnew bytes(len + len / 3)\n      PUSH 20\t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      PUSH 40\t\t\tnew bytes(len + len / 3)\n      MSTORE \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      ISZERO \t\t\tnew bytes(len + len / 3)\n      PUSH [tag] 102\t\t\tnew bytes(len + len / 3)\n      JUMPI \t\t\tnew bytes(len + len / 3)\n      DUP2 \t\t\tnew bytes(len + len / 3)\n      PUSH 20\t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      PUSH 1\t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      MUL \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      CALLDATASIZE \t\t\tnew bytes(len + len / 3)\n      DUP4 \t\t\tnew bytes(len + len / 3)\n      CALLDATACOPY \t\t\tnew bytes(len + len / 3)\n      DUP1 \t\t\tnew bytes(len + len / 3)\n      DUP3 \t\t\tnew bytes(len + len / 3)\n      ADD \t\t\tnew bytes(len + len / 3)\n      SWAP2 \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n      SWAP1 \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n    tag 102\t\t\tnew bytes(len + len / 3)\n      JUMPDEST \t\t\tnew bytes(len + len / 3)\n      POP \t\t\tnew bytes(len + len / 3)\n      SWAP1 \t\t\tbytes memory result = new byte...\n      POP \t\t\tbytes memory result = new byte...\n      PUSH 0\t\t\tuint256 j\n      DUP1 \t\t\tuint256 i\n    tag 103\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < len; i...\n      DUP4 \t\t\tlen\n      DUP2 \t\t\ti\n      LT \t\t\ti < len\n      ISZERO \t\t\tfor (uint256 i = 0; i < len; i...\n      PUSH [tag] 104\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMPI \t\t\tfor (uint256 i = 0; i < len; i...\n      PUSH 0\t\t\t0\n      PUSH 3\t\t\t3\n      DUP3 \t\t\ti\n      DUP7 \t\t\tlen\n      PUSH [tag] 106\t\t\tlen - i\n      SWAP2 \t\t\tlen - i\n      SWAP1 \t\t\tlen - i\n      PUSH [tag] 74\t\t\tlen - i\n      JUMP \t\t\tlen - i\n    tag 106\t\t\tlen - i\n      JUMPDEST \t\t\tlen - i\n      PUSH [tag] 107\t\t\t(len - i) % 3\n      SWAP2 \t\t\t(len - i) % 3\n      SWAP1 \t\t\t(len - i) % 3\n      PUSH [tag] 60\t\t\t(len - i) % 3\n      JUMP \t\t\t(len - i) % 3\n    tag 107\t\t\t(len - i) % 3\n      JUMPDEST \t\t\t(len - i) % 3\n      EQ \t\t\t(len - i) % 3 == 0\n      DUP1 \t\t\t(len - i) % 3 == 0 && i != 0\n      ISZERO \t\t\t(len - i) % 3 == 0 && i != 0\n      PUSH [tag] 108\t\t\t(len - i) % 3 == 0 && i != 0\n      JUMPI \t\t\t(len - i) % 3 == 0 && i != 0\n      POP \t\t\t(len - i) % 3 == 0 && i != 0\n      PUSH 0\t\t\t0\n      DUP2 \t\t\ti\n      EQ \t\t\ti != 0\n      ISZERO \t\t\ti != 0\n    tag 108\t\t\t(len - i) % 3 == 0 && i != 0\n      JUMPDEST \t\t\t(len - i) % 3 == 0 && i != 0\n      ISZERO \t\t\tif ((len - i) % 3 == 0 && i !=...\n      PUSH [tag] 109\t\t\tif ((len - i) % 3 == 0 && i !=...\n      JUMPI \t\t\tif ((len - i) % 3 == 0 && i !=...\n      PUSH 2C00000000000000000000000000000000000000000000000000000000000000\t\t\tbytes1(',')\n      DUP4 \t\t\tresult\n      DUP4 \t\t\tj++\n      DUP1 \t\t\tj++\n      PUSH [tag] 110\t\t\tj++\n      SWAP1 \t\t\tj++\n      PUSH [tag] 79\t\t\tj++\n      JUMP \t\t\tj++\n    tag 110\t\t\tj++\n      JUMPDEST \t\t\tj++\n      SWAP5 \t\t\tj++\n      POP \t\t\tj++\n      DUP2 \t\t\tresult[j++]\n      MLOAD \t\t\tresult[j++]\n      DUP2 \t\t\tresult[j++]\n      LT \t\t\tresult[j++]\n      PUSH [tag] 111\t\t\tresult[j++]\n      JUMPI \t\t\tresult[j++]\n      PUSH [tag] 112\t\t\tresult[j++]\n      PUSH [tag] 82\t\t\tresult[j++]\n      JUMP \t\t\tresult[j++]\n    tag 112\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n    tag 111\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n      PUSH 20\t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      SWAP1 \t\t\tresult[j++] = bytes1(',')\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tresult[j++] = bytes1(',')\n      NOT \t\t\tresult[j++] = bytes1(',')\n      AND \t\t\tresult[j++] = bytes1(',')\n      SWAP1 \t\t\tresult[j++] = bytes1(',')\n      DUP2 \t\t\tresult[j++] = bytes1(',')\n      PUSH 0\t\t\tresult[j++] = bytes1(',')\n      BYTE \t\t\tresult[j++] = bytes1(',')\n      SWAP1 \t\t\tresult[j++] = bytes1(',')\n      MSTORE8 \t\t\tresult[j++] = bytes1(',')\n      POP \t\t\tresult[j++] = bytes1(',')\n    tag 109\t\t\tif ((len - i) % 3 == 0 && i !=...\n      JUMPDEST \t\t\tif ((len - i) % 3 == 0 && i !=...\n      DUP5 \t\t\tstrBytes\n      DUP2 \t\t\ti\n      DUP2 \t\t\tstrBytes[i]\n      MLOAD \t\t\tstrBytes[i]\n      DUP2 \t\t\tstrBytes[i]\n      LT \t\t\tstrBytes[i]\n      PUSH [tag] 113\t\t\tstrBytes[i]\n      JUMPI \t\t\tstrBytes[i]\n      PUSH [tag] 114\t\t\tstrBytes[i]\n      PUSH [tag] 82\t\t\tstrBytes[i]\n      JUMP \t\t\tstrBytes[i]\n    tag 114\t\t\tstrBytes[i]\n      JUMPDEST \t\t\tstrBytes[i]\n    tag 113\t\t\tstrBytes[i]\n      JUMPDEST \t\t\tstrBytes[i]\n      PUSH 20\t\t\tstrBytes[i]\n      ADD \t\t\tstrBytes[i]\n      ADD \t\t\tstrBytes[i]\n      MLOAD \t\t\tstrBytes[i]\n      PUSH F8\t\t\tstrBytes[i]\n      SHR \t\t\tstrBytes[i]\n      PUSH F8\t\t\tstrBytes[i]\n      SHL \t\t\tstrBytes[i]\n      DUP4 \t\t\tresult\n      DUP4 \t\t\tj++\n      DUP1 \t\t\tj++\n      PUSH [tag] 115\t\t\tj++\n      SWAP1 \t\t\tj++\n      PUSH [tag] 79\t\t\tj++\n      JUMP \t\t\tj++\n    tag 115\t\t\tj++\n      JUMPDEST \t\t\tj++\n      SWAP5 \t\t\tj++\n      POP \t\t\tj++\n      DUP2 \t\t\tresult[j++]\n      MLOAD \t\t\tresult[j++]\n      DUP2 \t\t\tresult[j++]\n      LT \t\t\tresult[j++]\n      PUSH [tag] 116\t\t\tresult[j++]\n      JUMPI \t\t\tresult[j++]\n      PUSH [tag] 117\t\t\tresult[j++]\n      PUSH [tag] 82\t\t\tresult[j++]\n      JUMP \t\t\tresult[j++]\n    tag 117\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n    tag 116\t\t\tresult[j++]\n      JUMPDEST \t\t\tresult[j++]\n      PUSH 20\t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      ADD \t\t\tresult[j++]\n      SWAP1 \t\t\tresult[j++] = strBytes[i]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tresult[j++] = strBytes[i]\n      NOT \t\t\tresult[j++] = strBytes[i]\n      AND \t\t\tresult[j++] = strBytes[i]\n      SWAP1 \t\t\tresult[j++] = strBytes[i]\n      DUP2 \t\t\tresult[j++] = strBytes[i]\n      PUSH 0\t\t\tresult[j++] = strBytes[i]\n      BYTE \t\t\tresult[j++] = strBytes[i]\n      SWAP1 \t\t\tresult[j++] = strBytes[i]\n      MSTORE8 \t\t\tresult[j++] = strBytes[i]\n      POP \t\t\tresult[j++] = strBytes[i]\n      DUP1 \t\t\ti++\n      DUP1 \t\t\ti++\n      PUSH [tag] 118\t\t\ti++\n      SWAP1 \t\t\ti++\n      PUSH [tag] 79\t\t\ti++\n      JUMP \t\t\ti++\n    tag 118\t\t\ti++\n      JUMPDEST \t\t\ti++\n      SWAP2 \t\t\ti++\n      POP \t\t\ti++\n      POP \t\t\ti++\n      PUSH [tag] 103\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMP \t\t\tfor (uint256 i = 0; i < len; i...\n    tag 104\t\t\tfor (uint256 i = 0; i < len; i...\n      JUMPDEST \t\t\tfor (uint256 i = 0; i < len; i...\n      POP \t\t\tfor (uint256 i = 0; i < len; i...\n      DUP2 \t\t\tresult\n      PUSH 40\t\t\tabi.encodePacked(\"$\", result, ...\n      MLOAD \t\t\tabi.encodePacked(\"$\", result, ...\n      PUSH 20\t\t\tabi.encodePacked(\"$\", result, ...\n      ADD \t\t\tabi.encodePacked(\"$\", result, ...\n      PUSH [tag] 119\t\t\tabi.encodePacked(\"$\", result, ...\n      SWAP2 \t\t\tabi.encodePacked(\"$\", result, ...\n      SWAP1 \t\t\tabi.encodePacked(\"$\", result, ...\n      PUSH [tag] 120\t\t\tabi.encodePacked(\"$\", result, ...\n      JUMP \t\t\tabi.encodePacked(\"$\", result, ...\n    tag 119\t\t\tabi.encodePacked(\"$\", result, ...\n      JUMPDEST \t\t\tabi.encodePacked(\"$\", result, ...\n      PUSH 40\t\t\tabi.encodePacked(\"$\", result, ...\n      MLOAD \t\t\tabi.encodePacked(\"$\", result, ...\n      PUSH 20\t\t\tabi.encodePacked(\"$\", result, ...\n      DUP2 \t\t\tabi.encodePacked(\"$\", result, ...\n      DUP4 \t\t\tabi.encodePacked(\"$\", result, ...\n      SUB \t\t\tabi.encodePacked(\"$\", result, ...\n      SUB \t\t\tabi.encodePacked(\"$\", result, ...\n      DUP2 \t\t\tabi.encodePacked(\"$\", result, ...\n      MSTORE \t\t\tabi.encodePacked(\"$\", result, ...\n      SWAP1 \t\t\tabi.encodePacked(\"$\", result, ...\n      PUSH 40\t\t\tabi.encodePacked(\"$\", result, ...\n      MSTORE \t\t\tabi.encodePacked(\"$\", result, ...\n      SWAP6 \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n      POP \t\t\treturn string(abi.encodePacked...\n    tag 93\t\t\tfunction formatUSD(uint256 amo...\n      JUMPDEST \t\t\tfunction formatUSD(uint256 amo...\n      SWAP2 \t\t\tfunction formatUSD(uint256 amo...\n      SWAP1 \t\t\tfunction formatUSD(uint256 amo...\n      POP \t\t\tfunction formatUSD(uint256 amo...\n      JUMP \t\t\tfunction formatUSD(uint256 amo...\n    tag 62\t\t\tfunction uintToString(uint256 ...\n      JUMPDEST \t\t\tfunction uintToString(uint256 ...\n      PUSH 60\t\t\tstring memory\n      PUSH 0\t\t\t0\n      DUP3 \t\t\tvalue\n      SUB \t\t\tvalue == 0\n      PUSH [tag] 122\t\t\tif (value == 0) {\\r\\n         ...\n      JUMPI \t\t\tif (value == 0) {\\r\\n         ...\n      PUSH 40\t\t\treturn \"0\"\n      MLOAD \t\t\treturn \"0\"\n      DUP1 \t\t\treturn \"0\"\n      PUSH 40\t\t\treturn \"0\"\n      ADD \t\t\treturn \"0\"\n      PUSH 40\t\t\treturn \"0\"\n      MSTORE \t\t\treturn \"0\"\n      DUP1 \t\t\treturn \"0\"\n      PUSH 1\t\t\treturn \"0\"\n      DUP2 \t\t\treturn \"0\"\n      MSTORE \t\t\treturn \"0\"\n      PUSH 20\t\t\treturn \"0\"\n      ADD \t\t\treturn \"0\"\n      PUSH 3000000000000000000000000000000000000000000000000000000000000000\t\t\treturn \"0\"\n      DUP2 \t\t\treturn \"0\"\n      MSTORE \t\t\treturn \"0\"\n      POP \t\t\treturn \"0\"\n      SWAP1 \t\t\treturn \"0\"\n      POP \t\t\treturn \"0\"\n      PUSH [tag] 121\t\t\treturn \"0\"\n      JUMP \t\t\treturn \"0\"\n    tag 122\t\t\tif (value == 0) {\\r\\n         ...\n      JUMPDEST \t\t\tif (value == 0) {\\r\\n         ...\n      PUSH 0\t\t\tuint256 temp\n      DUP3 \t\t\tvalue\n      SWAP1 \t\t\tuint256 temp = value\n      POP \t\t\tuint256 temp = value\n      PUSH 0\t\t\tuint256 digits\n    tag 123\t\t\twhile (temp != 0) {\\r\\n       ...\n      JUMPDEST \t\t\twhile (temp != 0) {\\r\\n       ...\n      PUSH 0\t\t\t0\n      DUP3 \t\t\ttemp\n      EQ \t\t\ttemp != 0\n      PUSH [tag] 124\t\t\twhile (temp != 0) {\\r\\n       ...\n      JUMPI \t\t\twhile (temp != 0) {\\r\\n       ...\n      DUP1 \t\t\tdigits++\n      DUP1 \t\t\tdigits++\n      PUSH [tag] 125\t\t\tdigits++\n      SWAP1 \t\t\tdigits++\n      PUSH [tag] 79\t\t\tdigits++\n      JUMP \t\t\tdigits++\n    tag 125\t\t\tdigits++\n      JUMPDEST \t\t\tdigits++\n      SWAP2 \t\t\tdigits++\n      POP \t\t\tdigits++\n      POP \t\t\tdigits++\n      PUSH A\t\t\t10\n      DUP3 \t\t\ttemp /= 10\n      PUSH [tag] 126\t\t\ttemp /= 10\n      SWAP2 \t\t\ttemp /= 10\n      SWAP1 \t\t\ttemp /= 10\n      PUSH [tag] 45\t\t\ttemp /= 10\n      JUMP \t\t\ttemp /= 10\n    tag 126\t\t\ttemp /= 10\n      JUMPDEST \t\t\ttemp /= 10\n      SWAP2 \t\t\ttemp /= 10\n      POP \t\t\ttemp /= 10\n      PUSH [tag] 123\t\t\twhile (temp != 0) {\\r\\n       ...\n      JUMP \t\t\twhile (temp != 0) {\\r\\n       ...\n    tag 124\t\t\twhile (temp != 0) {\\r\\n       ...\n      JUMPDEST \t\t\twhile (temp != 0) {\\r\\n       ...\n      PUSH 0\t\t\tbytes memory buffer\n      DUP2 \t\t\tdigits\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnew bytes(digits)\n      DUP2 \t\t\tnew bytes(digits)\n      GT \t\t\tnew bytes(digits)\n      ISZERO \t\t\tnew bytes(digits)\n      PUSH [tag] 127\t\t\tnew bytes(digits)\n      JUMPI \t\t\tnew bytes(digits)\n      PUSH [tag] 128\t\t\tnew bytes(digits)\n      PUSH [tag] 68\t\t\tnew bytes(digits)\n      JUMP \t\t\tnew bytes(digits)\n    tag 128\t\t\tnew bytes(digits)\n      JUMPDEST \t\t\tnew bytes(digits)\n    tag 127\t\t\tnew bytes(digits)\n      JUMPDEST \t\t\tnew bytes(digits)\n      PUSH 40\t\t\tnew bytes(digits)\n      MLOAD \t\t\tnew bytes(digits)\n      SWAP1 \t\t\tnew bytes(digits)\n      DUP1 \t\t\tnew bytes(digits)\n      DUP3 \t\t\tnew bytes(digits)\n      MSTORE \t\t\tnew bytes(digits)\n      DUP1 \t\t\tnew bytes(digits)\n      PUSH 1F\t\t\tnew bytes(digits)\n      ADD \t\t\tnew bytes(digits)\n      PUSH 1F\t\t\tnew bytes(digits)\n      NOT \t\t\tnew bytes(digits)\n      AND \t\t\tnew bytes(digits)\n      PUSH 20\t\t\tnew bytes(digits)\n      ADD \t\t\tnew bytes(digits)\n      DUP3 \t\t\tnew bytes(digits)\n      ADD \t\t\tnew bytes(digits)\n      PUSH 40\t\t\tnew bytes(digits)\n      MSTORE \t\t\tnew bytes(digits)\n      DUP1 \t\t\tnew bytes(digits)\n      ISZERO \t\t\tnew bytes(digits)\n      PUSH [tag] 129\t\t\tnew bytes(digits)\n      JUMPI \t\t\tnew bytes(digits)\n      DUP2 \t\t\tnew bytes(digits)\n      PUSH 20\t\t\tnew bytes(digits)\n      ADD \t\t\tnew bytes(digits)\n      PUSH 1\t\t\tnew bytes(digits)\n      DUP3 \t\t\tnew bytes(digits)\n      MUL \t\t\tnew bytes(digits)\n      DUP1 \t\t\tnew bytes(digits)\n      CALLDATASIZE \t\t\tnew bytes(digits)\n      DUP4 \t\t\tnew bytes(digits)\n      CALLDATACOPY \t\t\tnew bytes(digits)\n      DUP1 \t\t\tnew bytes(digits)\n      DUP3 \t\t\tnew bytes(digits)\n      ADD \t\t\tnew bytes(digits)\n      SWAP2 \t\t\tnew bytes(digits)\n      POP \t\t\tnew bytes(digits)\n      POP \t\t\tnew bytes(digits)\n      SWAP1 \t\t\tnew bytes(digits)\n      POP \t\t\tnew bytes(digits)\n    tag 129\t\t\tnew bytes(digits)\n      JUMPDEST \t\t\tnew bytes(digits)\n      POP \t\t\tnew bytes(digits)\n      SWAP1 \t\t\tbytes memory buffer = new byte...\n      POP \t\t\tbytes memory buffer = new byte...\n    tag 130\t\t\twhile (value != 0) {\\r\\n      ...\n      JUMPDEST \t\t\twhile (value != 0) {\\r\\n      ...\n      PUSH 0\t\t\t0\n      DUP6 \t\t\tvalue\n      EQ \t\t\tvalue != 0\n      PUSH [tag] 131\t\t\twhile (value != 0) {\\r\\n      ...\n      JUMPI \t\t\twhile (value != 0) {\\r\\n      ...\n      PUSH 1\t\t\t1\n      DUP3 \t\t\tdigits -= 1\n      PUSH [tag] 132\t\t\tdigits -= 1\n      SWAP2 \t\t\tdigits -= 1\n      SWAP1 \t\t\tdigits -= 1\n      PUSH [tag] 74\t\t\tdigits -= 1\n      JUMP \t\t\tdigits -= 1\n    tag 132\t\t\tdigits -= 1\n      JUMPDEST \t\t\tdigits -= 1\n      SWAP2 \t\t\tdigits -= 1\n      POP \t\t\tdigits -= 1\n      PUSH A\t\t\t10\n      DUP6 \t\t\tvalue\n      PUSH [tag] 133\t\t\tvalue % 10\n      SWAP2 \t\t\tvalue % 10\n      SWAP1 \t\t\tvalue % 10\n      PUSH [tag] 60\t\t\tvalue % 10\n      JUMP \t\t\tvalue % 10\n    tag 133\t\t\tvalue % 10\n      JUMPDEST \t\t\tvalue % 10\n      PUSH 30\t\t\t48\n      PUSH [tag] 134\t\t\t48 + uint256(value % 10)\n      SWAP2 \t\t\t48 + uint256(value % 10)\n      SWAP1 \t\t\t48 + uint256(value % 10)\n      PUSH [tag] 65\t\t\t48 + uint256(value % 10)\n      JUMP \t\t\t48 + uint256(value % 10)\n    tag 134\t\t\t48 + uint256(value % 10)\n      JUMPDEST \t\t\t48 + uint256(value % 10)\n      PUSH F8\t\t\tbytes1(uint8(48 + uint256(valu...\n      SHL \t\t\tbytes1(uint8(48 + uint256(valu...\n      DUP2 \t\t\tbuffer\n      DUP4 \t\t\tdigits\n      DUP2 \t\t\tbuffer[digits]\n      MLOAD \t\t\tbuffer[digits]\n      DUP2 \t\t\tbuffer[digits]\n      LT \t\t\tbuffer[digits]\n      PUSH [tag] 135\t\t\tbuffer[digits]\n      JUMPI \t\t\tbuffer[digits]\n      PUSH [tag] 136\t\t\tbuffer[digits]\n      PUSH [tag] 82\t\t\tbuffer[digits]\n      JUMP \t\t\tbuffer[digits]\n    tag 136\t\t\tbuffer[digits]\n      JUMPDEST \t\t\tbuffer[digits]\n    tag 135\t\t\tbuffer[digits]\n      JUMPDEST \t\t\tbuffer[digits]\n      PUSH 20\t\t\tbuffer[digits]\n      ADD \t\t\tbuffer[digits]\n      ADD \t\t\tbuffer[digits]\n      SWAP1 \t\t\tbuffer[digits] = bytes1(uint8(...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbuffer[digits] = bytes1(uint8(...\n      NOT \t\t\tbuffer[digits] = bytes1(uint8(...\n      AND \t\t\tbuffer[digits] = bytes1(uint8(...\n      SWAP1 \t\t\tbuffer[digits] = bytes1(uint8(...\n      DUP2 \t\t\tbuffer[digits] = bytes1(uint8(...\n      PUSH 0\t\t\tbuffer[digits] = bytes1(uint8(...\n      BYTE \t\t\tbuffer[digits] = bytes1(uint8(...\n      SWAP1 \t\t\tbuffer[digits] = bytes1(uint8(...\n      MSTORE8 \t\t\tbuffer[digits] = bytes1(uint8(...\n      POP \t\t\tbuffer[digits] = bytes1(uint8(...\n      PUSH A\t\t\t10\n      DUP6 \t\t\tvalue /= 10\n      PUSH [tag] 137\t\t\tvalue /= 10\n      SWAP2 \t\t\tvalue /= 10\n      SWAP1 \t\t\tvalue /= 10\n      PUSH [tag] 45\t\t\tvalue /= 10\n      JUMP \t\t\tvalue /= 10\n    tag 137\t\t\tvalue /= 10\n      JUMPDEST \t\t\tvalue /= 10\n      SWAP5 \t\t\tvalue /= 10\n      POP \t\t\tvalue /= 10\n      PUSH [tag] 130\t\t\twhile (value != 0) {\\r\\n      ...\n      JUMP \t\t\twhile (value != 0) {\\r\\n      ...\n    tag 131\t\t\twhile (value != 0) {\\r\\n      ...\n      JUMPDEST \t\t\twhile (value != 0) {\\r\\n      ...\n      DUP1 \t\t\tbuffer\n      SWAP4 \t\t\treturn string(buffer)\n      POP \t\t\treturn string(buffer)\n      POP \t\t\treturn string(buffer)\n      POP \t\t\treturn string(buffer)\n      POP \t\t\treturn string(buffer)\n    tag 121\t\t\tfunction uintToString(uint256 ...\n      JUMPDEST \t\t\tfunction uintToString(uint256 ...\n      SWAP2 \t\t\tfunction uintToString(uint256 ...\n      SWAP1 \t\t\tfunction uintToString(uint256 ...\n      POP \t\t\tfunction uintToString(uint256 ...\n      JUMP \t\t\tfunction uintToString(uint256 ...\n    tag 138\t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n      PUSH 0\t\t\t\\ncontr\n      DUP2 \t\t\trivat\n      MLOAD \t\t\tring private\n      SWAP1 \t\t\t {\\r\\n    string private\n      POP \t\t\t {\\r\\n    string private\n      SWAP2 \t\t\t-License-Identifier: MIT\\r\\npr...\n      SWAP1 \t\t\t-License-Identifier: MIT\\r\\npr...\n      POP \t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMP \t\t\t-License-Identifier: MIT\\r\\npr...\n    tag 139\t\t\tger-Nano-X (Recognized HARDWAR...\n      JUMPDEST \t\t\tger-Nano-X (Recognized HARDWAR...\n      PUSH 0\t\t\t    bool pr\n      DUP3 \t\t\t\\r\\n\\r\\n  \n      DUP3 \t\t\tals\n      MSTORE \t\t\tdIn = false;\\r\\n\\r\\n   \n      PUSH 20\t\t\tmemo\n      DUP3 \t\t\trin\n      ADD \t\t\td(string memor\n      SWAP1 \t\t\t requirePassword(string memor\n      POP \t\t\t requirePassword(string memor\n      SWAP3 \t\t\tger-Nano-X (Recognized HARDWAR...\n      SWAP2 \t\t\tger-Nano-X (Recognized HARDWAR...\n      POP \t\t\tger-Nano-X (Recognized HARDWAR...\n      POP \t\t\tger-Nano-X (Recognized HARDWAR...\n      JUMP \t\t\tger-Nano-X (Recognized HARDWAR...\n    tag 140\t\t\t{\\r\\n        require(keccak256...\n      JUMPDEST \t\t\t{\\r\\n        require(keccak256...\n      PUSH 0\t\t\t \n    tag 181\t\t\tt password.\");\\r\\n        _;\\r...\n      JUMPDEST \t\t\tt password.\");\\r\\n        _;\\r...\n      DUP4 \t\t\t\\r\\n    \n      DUP2 \t\t\t\"\n      LT \t\t\trd.\");\\r\\n     \n      ISZERO \t\t\tt password.\");\\r\\n        _;\\r...\n      PUSH [tag] 183\t\t\tt password.\");\\r\\n        _;\\r...\n      JUMPI \t\t\tt password.\");\\r\\n        _;\\r...\n      DUP1 \t\t\ts\n      DUP3 \t\t\t\"Pl\n      ADD \t\t\tIn, \"Please\n      MLOAD \t\t\tloggedIn, \"Please \n      DUP2 \t\t\ti\n      DUP5 \t\t\t re\n      ADD \t\t\t     requir\n      MSTORE \t\t\t {\\r\\n        require(loggedIn...\n      PUSH 20\t\t\t\\n \n      DUP2 \t\t\t\\r\n      ADD \t\t\t   }\\r\\n\\r\\n  \n      SWAP1 \t\t\t_;\\r\\n    }\\r\\n\\r\\n  \n      POP \t\t\t_;\\r\\n    }\\r\\n\\r\\n  \n      PUSH [tag] 181\t\t\tt password.\");\\r\\n        _;\\r...\n      JUMP \t\t\tt password.\");\\r\\n        _;\\r...\n    tag 183\t\t\tt password.\");\\r\\n        _;\\r...\n      JUMPDEST \t\t\tt password.\");\\r\\n        _;\\r...\n      PUSH 0\t\t\tc\n      DUP5 \t\t\t\\r\\n    \n      DUP5 \t\t\t  }\n      ADD \t\t\t\\r\\n    }\\r\\n\\r\\n    f\n      MSTORE \t\t\t     _;\\r\\n    }\\r\\n\\r\\n    fu...\n      POP \t\t\t) == PASSWORD_HASH, \"Incorrect...\n      POP \t\t\t{\\r\\n        require(keccak256...\n      POP \t\t\t{\\r\\n        require(keccak256...\n      POP \t\t\t{\\r\\n        require(keccak256...\n      JUMP \t\t\t{\\r\\n        require(keccak256...\n    tag 141\t\t\tATION(string memory password) ...\n      JUMPDEST \t\t\tATION(string memory password) ...\n      PUSH 0\t\t\tirePas\n      PUSH 1F\t\t\t  \n      NOT \t\t\te;\\r\\n   \n      PUSH 1F\t\t\t= \n      DUP4 \t\t\tggedI\n      ADD \t\t\t  loggedIn = t\n      AND \t\t\t      loggedIn = true;\\r\\n    \n      SWAP1 \t\t\tord) {\\r\\n        loggedIn = t...\n      POP \t\t\tord) {\\r\\n        loggedIn = t...\n      SWAP2 \t\t\tATION(string memory password) ...\n      SWAP1 \t\t\tATION(string memory password) ...\n      POP \t\t\tATION(string memory password) ...\n      JUMP \t\t\tATION(string memory password) ...\n    tag 142\t\t\tunction CONVERSION() public vi...\n      JUMPDEST \t\t\tunction CONVERSION() public vi...\n      PUSH 0\t\t\t bt\n      PUSH [tag] 186\t\t\t    uint256 usdAmount = btcAmo...\n      DUP3 \t\t\t * bt\n      PUSH [tag] 138\t\t\t    uint256 usdAmount = btcAmo...\n      JUMP \t\t\t    uint256 usdAmount = btcAmo...\n    tag 186\t\t\t    uint256 usdAmount = btcAmo...\n      JUMPDEST \t\t\t    uint256 usdAmount = btcAmo...\n      PUSH [tag] 187\t\t\t*8);\\r\\n        return formatU...\n      DUP2 \t\t\tn OWNE\n      DUP6 \t\t\tnct\n      PUSH [tag] 139\t\t\t*8);\\r\\n        return formatU...\n      JUMP \t\t\t*8);\\r\\n        return formatU...\n    tag 187\t\t\t*8);\\r\\n        return formatU...\n      JUMPDEST \t\t\t*8);\\r\\n        return formatU...\n      SWAP4 \t\t\t / (10**8);\\r\\n        return ...\n      POP \t\t\t / (10**8);\\r\\n        return ...\n      PUSH [tag] 188\t\t\t view requireLogin returns (st...\n      DUP2 \t\t\trn own\n      DUP6 \t\t\t re\n      PUSH 20\t\t\t    \n      DUP7 \t\t\try) {\n      ADD \t\t\tmemory) {\\r\\n     \n      PUSH [tag] 140\t\t\t view requireLogin returns (st...\n      JUMP \t\t\t view requireLogin returns (st...\n    tag 188\t\t\t view requireLogin returns (st...\n      JUMPDEST \t\t\t view requireLogin returns (st...\n      PUSH [tag] 189\t\t\t TOKENS() public view require\n      DUP2 \t\t\trequir\n      PUSH [tag] 141\t\t\t TOKENS() public view require\n      JUMP \t\t\t TOKENS() public view require\n    tag 189\t\t\t TOKENS() public view require\n      JUMPDEST \t\t\t TOKENS() public view require\n      DUP5 \t\t\tcti\n      ADD \t\t\t function TOKENS() public view...\n      SWAP2 \t\t\t\\r\\n\\r\\n    function TOKENS() ...\n      POP \t\t\t\\r\\n\\r\\n    function TOKENS() ...\n      POP \t\t\tToUsdRate = 27017;\\r\\n        ...\n      SWAP3 \t\t\tunction CONVERSION() public vi...\n      SWAP2 \t\t\tunction CONVERSION() public vi...\n      POP \t\t\tunction CONVERSION() public vi...\n      POP \t\t\tunction CONVERSION() public vi...\n      JUMP \t\t\tunction CONVERSION() public vi...\n    tag 10\t\t\t (string memory) {\\r\\n        ...\n      JUMPDEST \t\t\t (string memory) {\\r\\n        ...\n      PUSH 0\t\t\t pur\n      PUSH 20\t\t\t  \n      DUP3 \t\t\ty) {\\r\\n   \n      ADD \t\t\temory) {\\r\\n        \n      SWAP1 \t\t\tstring memory) {\\r\\n        \n      POP \t\t\tstring memory) {\\r\\n        \n      DUP2 \t\t\t;\\r\\n      \n      DUP2 \t\t\tmoun\n      SUB \t\t\tng(amount);\\r\\n       \n      PUSH 0\t\t\tS\n      DUP4 \t\t\tnt = uint\n      ADD \t\t\tAmount = uintToSt\n      MSTORE \t\t\tory strAmount = uintToString(a...\n      PUSH [tag] 191\t\t\tytes = bytes(strAmount);\\r\\n  ...\n      DUP2 \t\t\t if \n      DUP5 \t\t\t\\r\\n    \n      PUSH [tag] 142\t\t\tytes = bytes(strAmount);\\r\\n  ...\n      JUMP \t\t\tytes = bytes(strAmount);\\r\\n  ...\n    tag 191\t\t\tytes = bytes(strAmount);\\r\\n  ...\n      JUMPDEST \t\t\tytes = bytes(strAmount);\\r\\n  ...\n      SWAP1 \t\t\tory strBytes = bytes(strAmount...\n      POP \t\t\tory strBytes = bytes(strAmount...\n      SWAP3 \t\t\t (string memory) {\\r\\n        ...\n      SWAP2 \t\t\t (string memory) {\\r\\n        ...\n      POP \t\t\t (string memory) {\\r\\n        ...\n      POP \t\t\t (string memory) {\\r\\n        ...\n      JUMP \t\t\t (string memory) {\\r\\n        ...\n    tag 143\t\t\t            return string(abi....\n      JUMPDEST \t\t\t            return string(abi....\n      PUSH 0\t\t\todePac\n      PUSH 40\t\t\t;\\r\n      MLOAD \t\t\t.00\"));\\r\\n\n      SWAP1 \t\t\trAmount, \".00\"));\\r\\n\n      POP \t\t\trAmount, \".00\"));\\r\\n\n      SWAP1 \t\t\t            return string(abi....\n      JUMP \t\t\t            return string(abi....\n    tag 144\t\t\t       bytes memory result = n...\n      JUMPDEST \t\t\t       bytes memory result = n...\n      PUSH 0\t\t\t \n      DUP1 \t\t\t;\n      REVERT \t\t\t6 i = 0; i <\n    tag 145\t\t\t\\r\\n            if ((len - i) ...\n      JUMPDEST \t\t\t\\r\\n            if ((len - i) ...\n      PUSH 0\t\t\t\\n\n      DUP1 \t\t\t \n      REVERT \t\t\t        }\\r\\n \n    tag 146\t\t\tesult[j++] = strBytes[i];\\r\\n ...\n      JUMPDEST \t\t\tesult[j++] = strBytes[i];\\r\\n ...\n      PUSH 0\t\t\t\\r\n      DUP1 \t\t\t\\n\n      REVERT \t\t\t\\n    }\\r\\n\\r\\n\\r\\n\n    tag 147\t\t\t formatBTC(uint256 amount) pri...\n      JUMPDEST \t\t\t formatBTC(uint256 amount) pri...\n      PUSH 0\t\t\t;\n      DUP1 \t\t\t*\n      REVERT \t\t\t / (10**8);\\r\n    tag 68\t\t\t decimalPart = amount % (10**8...\n      JUMPDEST \t\t\t decimalPart = amount % (10**8...\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\tory strIntegerPart = uintToStr...\n      PUSH 0\t\t\tm\n      MSTORE \t\t\tstring memory strIntegerPart =...\n      PUSH 41\t\t\t);\\r\\n\n      PUSH 4\t\t\ta\n      MSTORE \t\t\tntegerPart);\\r\\n \n      PUSH 24\t\t\trByt\n      PUSH 0\t\t\t \n      REVERT \t\t\t6 len = strByte\n    tag 148\t\t\t   bytes memory result = new b...\n      JUMPDEST \t\t\t   bytes memory result = new b...\n      PUSH [tag] 199\t\t\tnt256 i = 0; i < len; i++) \n      DUP3 \t\t\ti++)\n      PUSH [tag] 141\t\t\tnt256 i = 0; i < len; i++) \n      JUMP \t\t\tnt256 i = 0; i < len; i++) \n    tag 199\t\t\tnt256 i = 0; i < len; i++) \n      JUMPDEST \t\t\tnt256 i = 0; i < len; i++) \n      DUP2 \t\t\t for (\n      ADD \t\t\t\\n    for (uint256 i = 0; i < ...\n      DUP2 \t\t\t    re\n      DUP2 \t\t\t     }\\r\\n  \n      LT \t\t\t        }\\r\\n        res\n      PUSH FFFFFFFFFFFFFFFF\t\t\tj++] = bytes1(',')\n      DUP3 \t\t\t     resul\n      GT \t\t\t        result[j++] = bytes1('...\n      OR \t\t\t           result[j++] = bytes...\n      ISZERO \t\t\t\\r\\n            result[j++] = ...\n      PUSH [tag] 200\t\t\t\\r\\n            result[j++] = ...\n      JUMPI \t\t\t\\r\\n            result[j++] = ...\n      PUSH [tag] 201\t\t\tj++] = strBytes[i]\n      PUSH [tag] 68\t\t\tj++] = strBytes[i]\n      JUMP \t\t\tj++] = strBytes[i]\n    tag 201\t\t\tj++] = strBytes[i]\n      JUMPDEST \t\t\tj++] = strBytes[i]\n    tag 200\t\t\t\\r\\n            result[j++] = ...\n      JUMPDEST \t\t\t\\r\\n            result[j++] = ...\n      DUP1 \t\t\ttring(abi.\n      PUSH 40\t\t\trn\n      MSTORE \t\t\t   return string(abi.e\n      POP \t\t\tn / 3);\\r\\n    uint256 j = 0;\\...\n      POP \t\t\t   bytes memory result = new b...\n      POP \t\t\t   bytes memory result = new b...\n      JUMP \t\t\t   bytes memory result = new b...\n    tag 149\t\t\tresult, \".\", uintToString(deci...\n      JUMPDEST \t\t\tresult, \".\", uintToString(deci...\n      PUSH 0\t\t\tart / \n      PUSH [tag] 203\t\t\t\\n}\\r\\n\\r\\n\\r\\n   bytes32 p\n      PUSH [tag] 143\t\t\t\\n}\\r\\n\\r\\n\\r\\n   bytes32 p\n      JUMP \t\t\t\\n}\\r\\n\\r\\n\\r\\n   bytes32 p\n    tag 203\t\t\t\\n}\\r\\n\\r\\n\\r\\n   bytes32 p\n      JUMPDEST \t\t\t\\n}\\r\\n\\r\\n\\r\\n   bytes32 p\n      SWAP1 \t\t\t0 BTC\"));\\r\\n}\\r\\n\\r\\n\\r\\n   b...\n      POP \t\t\t0 BTC\"));\\r\\n}\\r\\n\\r\\n\\r\\n   b...\n      PUSH [tag] 204\t\t\tnstant PASSWORD_HASH = keccak2...\n      DUP3 \t\t\tk256\n      DUP3 \t\t\t = kec\n      PUSH [tag] 148\t\t\tnstant PASSWORD_HASH = keccak2...\n      JUMP \t\t\tnstant PASSWORD_HASH = keccak2...\n    tag 204\t\t\tnstant PASSWORD_HASH = keccak2...\n      JUMPDEST \t\t\tnstant PASSWORD_HASH = keccak2...\n      SWAP2 \t\t\tresult, \".\", uintToString(deci...\n      SWAP1 \t\t\tresult, \".\", uintToString(deci...\n      POP \t\t\tresult, \".\", uintToString(deci...\n      JUMP \t\t\tresult, \".\", uintToString(deci...\n    tag 150\t\t\tcked(\"Xy~01k!*\"));\\r\\n\\r\\n    ...\n      JUMPDEST \t\t\tcked(\"Xy~01k!*\"));\\r\\n\\r\\n    ...\n      PUSH 0\t\t\t pri\n      PUSH FFFFFFFFFFFFFFFF\t\t\t;\\r\\n        }\\r\\n    \n      DUP3 \t\t\tturn \"\n      GT \t\t\t return \"0\";\\r\\n        }\\r\\n ...\n      ISZERO \t\t\t    return \"0\";\\r\\n        }\\r...\n      PUSH [tag] 206\t\t\t    return \"0\";\\r\\n        }\\r...\n      JUMPI \t\t\t    return \"0\";\\r\\n        }\\r...\n      PUSH [tag] 207\t\t\tuint256 temp = val\n      PUSH [tag] 68\t\t\tuint256 temp = val\n      JUMP \t\t\tuint256 temp = val\n    tag 207\t\t\tuint256 temp = val\n      JUMPDEST \t\t\tuint256 temp = val\n    tag 206\t\t\t    return \"0\";\\r\\n        }\\r...\n      JUMPDEST \t\t\t    return \"0\";\\r\\n        }\\r...\n      PUSH [tag] 208\t\t\t digits;\\r\\n        while (tem...\n      DUP3 \t\t\te (tem\n      PUSH [tag] 141\t\t\t digits;\\r\\n        while (tem...\n      JUMP \t\t\t digits;\\r\\n        while (tem...\n    tag 208\t\t\t digits;\\r\\n        while (tem...\n      JUMPDEST \t\t\t digits;\\r\\n        while (tem...\n      SWAP1 \t\t\t uint256 digits;\\r\\n        wh...\n      POP \t\t\t uint256 digits;\\r\\n        wh...\n      PUSH 20\t\t\t;\\r\\n \n      DUP2 \t\t\t /= \n      ADD \t\t\ttemp /= 10;\\r\\n  \n      SWAP1 \t\t\t        temp /= 10;\\r\\n  \n      POP \t\t\t        temp /= 10;\\r\\n  \n      SWAP2 \t\t\tcked(\"Xy~01k!*\"));\\r\\n\\r\\n    ...\n      SWAP1 \t\t\tcked(\"Xy~01k!*\"));\\r\\n\\r\\n    ...\n      POP \t\t\tcked(\"Xy~01k!*\"));\\r\\n\\r\\n    ...\n      JUMP \t\t\tcked(\"Xy~01k!*\"));\\r\\n\\r\\n    ...\n    tag 151\t\t\t    bytes memory buffer = new ...\n      JUMPDEST \t\t\t    bytes memory buffer = new ...\n      DUP3 \t\t\t 1;\\r\\n \n      DUP2 \t\t\tts \n      DUP4 \t\t\t di\n      CALLDATACOPY \t\t\t\\r\\n            digits -= 1;\\r...\n      PUSH 0\t\t\tu\n      DUP4 \t\t\t= byte\n      DUP4 \t\t\tits\n      ADD \t\t\t[digits] = bytes\n      MSTORE \t\t\t buffer[digits] = bytes1(ui\n      POP \t\t\t    bytes memory buffer = new ...\n      POP \t\t\t    bytes memory buffer = new ...\n      POP \t\t\t    bytes memory buffer = new ...\n      JUMP \t\t\t    bytes memory buffer = new ...\n    tag 152\t\t\tt256(value % 10)));\\r\\n       ...\n      JUMPDEST \t\t\tt256(value % 10)));\\r\\n       ...\n      PUSH 0\t\t\tg(buf\n      PUSH [tag] 211\t\t\t\n      PUSH [tag] 212\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 150\t\t\t\n      JUMP \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 149\t\t\t\n      JUMP \t\t\t\n    tag 211\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t}\\r\\n}\n      POP \t\t\t}\\r\\n}\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 214\t\t\t\n      PUSH [tag] 147\t\t\t\n      JUMP \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 215\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 151\t\t\t\n      JUMP \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\ter);\\r\\n    }\\r\\n}\n      SWAP4 \t\t\tt256(value % 10)));\\r\\n       ...\n      SWAP3 \t\t\tt256(value % 10)));\\r\\n       ...\n      POP \t\t\tt256(value % 10)));\\r\\n       ...\n      POP \t\t\tt256(value % 10)));\\r\\n       ...\n      POP \t\t\tt256(value % 10)));\\r\\n       ...\n      JUMP \t\t\tt256(value % 10)));\\r\\n       ...\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 218\t\t\t\n      PUSH [tag] 146\t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 219\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 152\t\t\t\n      JUMP \t\t\t\n    tag 219\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 221\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 222\t\t\t\n      PUSH [tag] 144\t\t\t\n      JUMP \t\t\t\n    tag 222\t\t\t\n      JUMPDEST \t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 223\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 224\t\t\t\n      PUSH [tag] 145\t\t\t\n      JUMP \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n    tag 223\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 225\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMP \t\t\t\n    tag 225\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 154\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 506C65617365206C6F67696E2066697273742E00000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 228\t\t\t\n      PUSH 13\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMP \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 229\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP \t\t\t\n    tag 229\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 24\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 231\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 27\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 234\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 236\t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 236\t\t\t\n      JUMPDEST \t\t\t\n    tag 235\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 158\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 43\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 240\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 240\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 241\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 241\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      PUSH [tag] 242\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      DUP5 \t\t\t\n      EQ \t\t\t\n      DUP4 \t\t\t\n      ISZERO \t\t\t\n      OR \t\t\t\n      PUSH [tag] 243\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 244\t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP \t\t\t\n    tag 244\t\t\t\n      JUMPDEST \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 247\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 248\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 248\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 250\t\t\t\n      PUSH [tag] 159\t\t\t\n      JUMP \t\t\t\n    tag 250\t\t\t\n      JUMPDEST \t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 160\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 58797E30316B212A000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 254\t\t\t\n      PUSH 8\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 254\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 255\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMP \t\t\t\n    tag 255\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 8\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 50\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 257\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 162\t\t\t\n      JUMP \t\t\t\n    tag 257\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 163\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 164\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 261\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 262\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 263\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 140\t\t\t\n      JUMP \t\t\t\n    tag 263\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 265\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 265\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 166\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 496E636F72726563742070617373776F72642E00000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 167\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 268\t\t\t\n      PUSH 13\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMP \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 269\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 269\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 55\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 271\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 167\t\t\t\n      JUMP \t\t\t\n    tag 271\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 60\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 273\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 274\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 274\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 275\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 276\t\t\t\n      PUSH [tag] 159\t\t\t\n      JUMP \t\t\t\n    tag 276\t\t\t\n      JUMPDEST \t\t\t\n    tag 275\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MOD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 278\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 278\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 279\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 280\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 281\t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP \t\t\t\n    tag 281\t\t\t\n      JUMPDEST \t\t\t\n    tag 280\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 74\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 283\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 283\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 284\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 284\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 285\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 286\t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP \t\t\t\n    tag 286\t\t\t\n      JUMPDEST \t\t\t\n    tag 285\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 79\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 288\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 288\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 289\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 290\t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP \t\t\t\n    tag 290\t\t\t\n      JUMPDEST \t\t\t\n    tag 289\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 82\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 32\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 168\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2E00000000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 294\t\t\t\n      PUSH 1\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 294\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 295\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 168\t\t\t\n      JUMP \t\t\t\n    tag 295\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 170\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 297\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 297\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 298\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 298\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 299\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 140\t\t\t\n      JUMP \t\t\t\n    tag 299\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 171\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3020425443000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 302\t\t\t\n      PUSH 5\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 302\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 303\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 171\t\t\t\n      JUMP \t\t\t\n    tag 303\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 92\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 305\t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 305\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 306\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 169\t\t\t\n      JUMP \t\t\t\n    tag 306\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 307\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 170\t\t\t\n      JUMP \t\t\t\n    tag 307\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 308\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 172\t\t\t\n      JUMP \t\t\t\n    tag 308\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 173\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2400000000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 311\t\t\t\n      PUSH 1\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 311\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 312\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 173\t\t\t\n      JUMP \t\t\t\n    tag 312\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2E30300000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 315\t\t\t\n      PUSH 3\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 315\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 316\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP \t\t\t\n    tag 316\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 97\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 318\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 318\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 319\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 170\t\t\t\n      JUMP \t\t\t\n    tag 319\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 320\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 320\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 120\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 322\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 322\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 323\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 323\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 324\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 324\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    .data\n  AAFAED2B39B823BF94636B2D15E213CC715F9DB176507D7232FFD32B6622025D:\n    4c65646765722d4e616e6f2d5820285265636f676e697a656420484152445741524529\n"
}